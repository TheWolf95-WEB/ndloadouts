from fastapi import FastAPI, Request, Body, BackgroundTasks
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from dotenv import load_dotenv, set_key, dotenv_values
import json
import os
import hmac
import hashlib
import requests 
import subprocess
from pathlib import Path
from urllib.parse import parse_qs

from database import init_db, get_all_builds, add_build, delete_build_by_id, get_all_users, save_user,  update_build_by_id 

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
WEBAPP_URL = os.getenv("WEBAPP_URL")
GITHUB_SECRET = os.getenv("WEBHOOK_SECRET", "")

VERSION_FILE = Path("data/version-history.html")

app = FastAPI()

# === GitHub Webhook ===
@app.post("/webhook")
async def webhook(request: Request, background_tasks: BackgroundTasks):
    body = await request.body()
    signature = request.headers.get("X-Hub-Signature-256")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if not signature or not hmac.compare_digest(
        signature,
        "sha256=" + hmac.new(GITHUB_SECRET.encode(), body, hashlib.sha256).hexdigest()
    ):
        return JSONResponse(status_code=403, content={"error": "Invalid signature"})

    # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(subprocess.call, ["/bin/bash", "/opt/ndloadouts/deploy.sh"])
    return {"status": "ok"}

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏ –∏ —à–∞–±–ª–æ–Ω–æ–≤ ===
app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/data", StaticFiles(directory="data"), name="data")
templates = Jinja2Templates(directory="templates")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ===
init_db()

# === –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–±–æ—Ä–æ–∫ ===
@app.get("/api/builds")
async def api_builds():
    return JSONResponse(get_all_builds())

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ ===
@app.post("/api/builds")
async def create_build(data: dict = Body(...)):
    try:
        add_build(data)
        return JSONResponse({"status": "ok"})
    except Exception as e:
        print(f"[add_build] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏: {e}")
        return JSONResponse({"status": "error", "detail": str(e)}, status_code=500)


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è ===
@app.get("/api/types")
def get_weapon_types():
    with open("data/types.json", "r", encoding="utf-8") as f:
        types = json.load(f)
    return JSONResponse(types)

from fastapi import Query
from urllib.parse import parse_qs
from starlette.requests import Request

# === /api/me ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@app.post("/api/me")
async def get_me(data: dict = Body(...)):
    init_data = data.get("initData", "")
    parsed = parse_qs(init_data)

    user_data = parsed.get("user", [None])[0]
    if not user_data:
        return JSONResponse({"error": "No user info"}, status_code=400)

    try:
        user_json = json.loads(user_data)
        user_id = str(user_json.get("id"))
        first_name = user_json.get("first_name", "")
        username = user_json.get("username", "")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user(user_id, first_name, username)

        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ .env
        env_vars = dotenv_values(".env")
        admin_ids = set(map(str.strip, env_vars.get("ADMIN_IDS", "").split(",")))
        admin_dop = set(map(str.strip, env_vars.get("ADMIN_DOP", "").split(",")))

        is_super_admin = user_id in admin_ids
        is_admin = is_super_admin or user_id in admin_dop

        return JSONResponse({
            "user_id": user_id,
            "first_name": first_name,
            "is_admin": is_admin,
            "is_super_admin": is_super_admin,
            "admin_ids": list(admin_ids),
            "admin_dop": list(admin_dop)  # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ
        })

    except Exception as e:
        return JSONResponse({
            "error": "Invalid user data",
            "detail": str(e),
            "raw": user_data
        }, status_code=400)



# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏

@app.delete("/api/builds/{build_id}")
def delete_build(build_id: str):
    try:
        delete_build_by_id(build_id)
        return {"status": "ok"}
    except Exception as e:
        return JSONResponse({"status": "error", "detail": str(e)}, status_code=500)

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–æ–∫

@app.put("/api/builds/{build_id}")
async def update_build(build_id: str, data: dict = Body(...)):
    try:
        update_build_by_id(build_id, data)
        return JSONResponse({"status": "ok"})
    except Exception as e:
        return JSONResponse({"status": "error", "detail": str(e)}, status_code=500)


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤:

@app.get("/api/admins")
async def get_admins():
    users = get_all_users()  # –∏–∑ –ë–î –∏–ª–∏ JSON (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å user_id –∏ first_name)

    admin_ids = set(map(str.strip, os.getenv("ADMIN_IDS", "").split(",")))
    admin_dop = set(map(str.strip, os.getenv("ADMIN_DOP", "").split(",")))

    def get_name(uid):
        user = next((u for u in users if str(u["id"]) == uid), None)
        return user["first_name"] if user else "–ë–µ–∑ –∏–º–µ–Ω–∏"

    return {
        "main_admins": [{"id": uid, "name": get_name(uid)} for uid in admin_ids],
        "dop_admins": [{"id": uid, "name": get_name(uid)} for uid in admin_dop]
    }



# –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞

@app.post("/api/assign-admin")
async def assign_admin(data: dict = Body(...)):
    requester_id = str(data.get("requesterId", "")).strip()
    user_id = str(data.get("userId", "")).strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ ID
    if not requester_id.isdigit() or not user_id.isdigit():
        return JSONResponse({"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"}, status_code=400)

    env_path = Path(".env")
    env_vars = dotenv_values(env_path)

    admin_ids = set(filter(None, map(str.strip, env_vars.get("ADMIN_IDS", "").split(","))))
    admin_dop = set(filter(None, map(str.strip, env_vars.get("ADMIN_DOP", "").split(","))))

    # –†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
    if requester_id not in admin_ids:
        return JSONResponse({"status": "error", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"}, status_code=403)

    # –£–∂–µ –∞–¥–º–∏–Ω (–≥–ª–∞–≤–Ω—ã–π –∏–ª–∏ –¥–æ–ø)
    if user_id in admin_ids or user_id in admin_dop:
        return JSONResponse({"status": "ok", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω."})

    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ ADMIN_DOP
    admin_dop.add(user_id)
    new_value = ",".join(sorted(admin_dop))
    set_key(env_path, "ADMIN_DOP", new_value)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
    bot_token = os.getenv("TOKEN")
    if bot_token:
        try:
            message = (
                "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n"
                "–í—ã –±—ã–ª–∏ <b>–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> –≤ ND Loadouts.\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–±–æ—Ä–æ–∫."
            )
            requests.post(
                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                json={
                    "chat_id": user_id,
                    "text": message,
                    "parse_mode": "HTML"
                },
                timeout=5
            )
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    return JSONResponse({"status": "ok", "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º."})


# –≠–Ω–¥–ø–æ–∏–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ø-–∞–¥–º–∏–Ω–∞:

@app.post("/api/remove-admin")
async def remove_admin(data: dict = Body(...)):
    requester_id = str(data.get("requesterId", "")).strip()
    target_id = str(data.get("userId", "")).strip()

    if not requester_id.isdigit() or not target_id.isdigit():
        return JSONResponse({"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"}, status_code=400)

    env_path = Path(".env")
    env_vars = dotenv_values(env_path)

    admin_ids = set(map(str.strip, env_vars.get("ADMIN_IDS", "").split(",")))
    admin_dop = set(filter(None, map(str.strip, env_vars.get("ADMIN_DOP", "").split(","))))

    # –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å
    if requester_id not in admin_ids:
        return JSONResponse({"status": "error", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"}, status_code=403)

    if target_id not in admin_dop:
        return JSONResponse({"status": "error", "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø. –∞–¥–º–∏–Ω–æ–º"}, status_code=404)

    admin_dop.remove(target_id)
    set_key(env_path, "ADMIN_DOP", ",".join(sorted(admin_dop)))

    return JSONResponse({"status": "ok", "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤."})


# –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

@app.get("/api/version-history")
async def get_version_history():
    if VERSION_FILE.exists():
        return {"content": VERSION_FILE.read_text(encoding="utf-8")}
    return {"content": ""}

@app.post("/api/version-history")
async def update_version_history(data: dict = Body(...)):
    content = data.get("content", "")
    VERSION_FILE.write_text(content, encoding="utf-8")
    return {"message": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"}
