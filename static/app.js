// –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º 

function showScreen(id) {
  const allScreens = document.querySelectorAll('.screen');

  allScreens.forEach(screen => {
    if (screen.id === id) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞—Ç—å –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
      screen.style.display = 'block';
      screen.classList.remove('active');

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ —Å–ª–µ–¥. –∫–∞–¥—Ä (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–ª–∞–≤–Ω–æ)
      requestAnimationFrame(() => {
        screen.classList.add('active');
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: screen.scrollIntoView({ behavior: "smooth" });
      });
    } else {
      screen.classList.remove('active');
      // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è transition (—á–µ—Ä–µ–∑ 300–º—Å)
      setTimeout(() => {
        screen.style.display = 'none';
      }, 300);
    }
  });
}



// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
document.getElementById('add-build-btn')?.addEventListener('click', () => showScreen('screen-form'));
document.getElementById('show-builds-btn')?.addEventListener('click', async () => {
  await loadBuilds();
  showScreen('screen-builds');
});
document.getElementById('back-to-main')?.addEventListener('click', () => showScreen('screen-main'));
document.getElementById('back-from-builds')?.addEventListener('click', () => showScreen('screen-main'));





const tg = window.Telegram.WebApp;
tg.expand();

let ADMIN_IDS = [];

async function fetchAdminIds() {
  try {
    const res = await fetch('/api/me');
    const data = await res.json();
    ADMIN_IDS = data.admin_ids || [];
    checkAdmin(); // –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å admin_ids:', e);
  }
}


const user = tg.initDataUnsafe?.user;
const userInfo = document.getElementById('user-info');
const buildsList = document.getElementById('builds-list');
const buildForm = document.getElementById('build-form');
const addBtn = document.getElementById('add-build-btn');
const showBuildsBtn = document.getElementById('show-builds-btn');
const roleButtons = document.getElementById('role-buttons');
const weaponTypeSelect = document.getElementById('weapon_type');
const tabsContainer = document.getElementById('tabs-container');
const modulesByType = {};

if (user) {
  userInfo.innerHTML = `<p>–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!</p>`;
  fetchAdminIds(); // –∑–∞–≥—Ä—É–∂–∞–µ–º ID –∞–¥–º–∏–Ω–æ–≤
} else {
  userInfo.innerHTML = '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.';
}

function checkAdmin() {
  const isAdmin = ADMIN_IDS.includes(user.id);
  if (isAdmin) {
    userInfo.innerHTML += `<p>–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω ‚úÖ</p>`;
    addBtn.style.display = 'inline-block';
  } else {
    userInfo.innerHTML += `<p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üë§</p>`;
  }
}


// === –ü–û–í–ï–î–ï–ù–ò–ï –ö–ù–û–ü–û–ö ===
addBtn?.addEventListener('click', () => {
  buildForm.style.display = 'block';
  buildsList.style.display = 'none';
  roleButtons.style.display = 'none';
});

showBuildsBtn?.addEventListener('click', async () => {
  buildForm.style.display = 'none';
  buildsList.style.display = 'block';
  roleButtons.style.display = 'none';
  await loadBuilds(); // –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–±–æ—Ä–∫–∏ –≤—Ä—É—á–Ω—É—é
});

// === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è ===
const weaponTypeLabels = {}; // type.key ‚Üí type.label

async function loadWeaponTypes() {
  const res = await fetch('/api/types');
  const types = await res.json();

  types.forEach(type => {
    const opt = document.createElement('option');
    opt.value = type.key;
    opt.textContent = type.label;
    weaponTypeLabels[type.key] = type.label; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    weaponTypeSelect.appendChild(opt);
  });

  const defaultType = weaponTypeSelect.value;
  await loadModules(defaultType);
}



// === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –ø–æ —Ç–∏–ø—É ===
const moduleNameMap = {};

async function loadModules(type) {
  if (modulesByType[type]) return;
  const res = await fetch(`/data/modules-${type}.json`);
  const mods = await res.json();
  modulesByType[type] = mods;

  // –°–æ–∑–¥–∞—ë–º map –¥–ª—è en ‚Üí ru
  for (const cat in mods) {
    mods[cat].forEach(mod => {
      moduleNameMap[mod.en] = mod.ru;
    });
  }
}

weaponTypeSelect.addEventListener('change', async () => {
  const type = weaponTypeSelect.value;
  await loadModules(type);
});

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ ===
document.getElementById('add-tab').addEventListener('click', () => {
  const type = weaponTypeSelect.value;
  const modules = modulesByType[type];

  if (!modules) return alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ä—É–∂–∏—è");

  const tabDiv = document.createElement('div');
  tabDiv.className = 'tab-block';

  // HTML –≤–∫–ª–∞–¥–∫–∏
    tabDiv.innerHTML = `
    <input type="text" class="form-input tab-label" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏" style="margin-bottom: 10px;">
    <div class="mod-selects"></div>
    <div class="tab-actions">
        <button type="button" class="btn add-mod">+ –º–æ–¥—É–ª—å</button>
        <button type="button" class="btn delete-tab">üóë –£–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É</button>
    </div>
    `;


  // –¥–æ–±–∞–≤–ª—è–µ–º –≤ DOM
  tabsContainer.appendChild(tabDiv);

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å"
const addModButton = tabDiv.querySelector('.add-mod');
addModButton.addEventListener('click', () => {
  const currentType = weaponTypeSelect.value;
  const currentModules = modulesByType[currentType];
  if (!currentModules) return alert("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ä—É–∂–∏—è");

  const row = document.createElement('div');
  row.className = 'mod-row';

  const categorySelect = document.createElement('select');
  categorySelect.className = 'form-input category-select';

  const moduleSelect = document.createElement('select');
  moduleSelect.className = 'form-input module-select';

  // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–æ–¥—É–ª–∏
  const usedCategories = Array.from(tabDiv.querySelectorAll('.category-select')).map(s => s.value);
  const usedModules = Array.from(tabDiv.querySelectorAll('.module-select')).map(s => s.value);

  // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  let firstAvailableCategory = null;
  for (const category in currentModules) {
    if (!usedCategories.includes(category)) {
      firstAvailableCategory = category;
      break;
    }
  }

  // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã
  if (!firstAvailableCategory) {
    alert("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
    return;
  }

  // –ó–∞–ø–æ–ª–Ω—è–µ–º select –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  for (const category in currentModules) {
    if (usedCategories.includes(category)) continue;
    const opt = document.createElement('option');
    opt.value = category;
    opt.textContent = category;
    categorySelect.appendChild(opt);
  }

  categorySelect.value = firstAvailableCategory;

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
  const updateModuleOptions = () => {
    const category = categorySelect.value;
    const mods = currentModules[category] || [];
    const selectedValues = Array.from(tabDiv.querySelectorAll('.module-select')).map(s => s.value);

    moduleSelect.innerHTML = '';
    mods.forEach(mod => {
      if (selectedValues.includes(mod.ru)) return;
      const opt = document.createElement('option');
      opt.value = mod.en; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      opt.textContent = mod.en; // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      moduleSelect.appendChild(opt);
    });

    // –ï—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –º–æ–¥—É–ª–µ–π
    if (moduleSelect.options.length === 0) {
      const opt = document.createElement('option');
      opt.textContent = '–í—Å–µ –º–æ–¥—É–ª–∏ –≤—ã–±—Ä–∞–Ω—ã';
      opt.disabled = true;
      moduleSelect.appendChild(opt);
      moduleSelect.disabled = true;
    } else {
      moduleSelect.disabled = false;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö module-select –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  const updateAllModuleSelects = () => {
    const selectedModules = Array.from(tabDiv.querySelectorAll('.module-select')).map(s => s.value);

    tabDiv.querySelectorAll('.mod-row').forEach(row => {
      const catSel = row.querySelector('.category-select');
      const modSel = row.querySelector('.module-select');
      const category = catSel.value;
      const mods = currentModules[category] || [];
      const currentValue = modSel.value;

      modSel.innerHTML = '';
      mods.forEach(mod => {
        if (selectedModules.includes(mod.ru) && mod.ru !== currentValue) return;
        const opt = document.createElement('option');
        opt.value = mod.en;
        opt.textContent = mod.en;
        modSel.appendChild(opt);
      });

      modSel.value = currentValue;
    });
  };

  // –°–ª—É—à–∞—Ç–µ–ª–∏
  categorySelect.addEventListener('change', () => {
    updateModuleOptions();
    updateAllModuleSelects();
  });

  moduleSelect.addEventListener('change', () => {
    updateAllModuleSelects();
  });

  row.appendChild(categorySelect);
  row.appendChild(moduleSelect);
  tabDiv.querySelector('.mod-selects').appendChild(row);

  // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
  updateModuleOptions();
  updateAllModuleSelects();
});



  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "—É–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É"
  tabDiv.querySelector('.delete-tab').addEventListener('click', () => {
    tabDiv.remove();
  });
});

// === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–±–æ—Ä–∫–∏ ===
document.getElementById('submit-build').addEventListener('click', async () => {
  try {
    const tabs = Array.from(tabsContainer.querySelectorAll('.tab-block')).map(tab => {
      const label = tab.querySelector('.tab-label').value.trim();
      const items = Array.from(tab.querySelectorAll('.mod-row')).map(row => {
        const modSelect = row.querySelector('.module-select');
        return modSelect?.value || ''; // –µ—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –±—É–¥–µ—Ç –ø—É—Å—Ç–æ
      }).filter(Boolean); // —É–¥–∞–ª–∏–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ

      return { label, items };
    });

    const data = {
      title: document.getElementById('title').value.trim(),
      weapon_type: weaponTypeSelect.value,
      top1: document.getElementById('top1').value.trim(),
      top2: document.getElementById('top2').value.trim(),
      top3: document.getElementById('top3').value.trim(),
      tabs,
    };

    const res = await fetch('/api/builds', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });

    if (res.ok) {
      alert("–°–±–æ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
      buildForm.style.display = 'none';
      buildsList.style.display = 'block';
      await loadBuilds(); // –ø–æ–∫–∞–∂–µ–º —Å–±–æ—Ä–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    } else {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.");
    }
  } catch (e) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
    console.error(e);
  }
});


// === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–≤–æ–¥ —Å–±–æ—Ä–æ–∫ ===
async function loadBuilds() {
  const res = await fetch("/api/builds");
  const builds = await res.json();
  const topColors = ["#FFD700", "#FF8C00", "#B0B0B0"];
  buildsList.innerHTML = "";

  if (builds.length === 0) {
    buildsList.innerHTML = "<p>–°–±–æ—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.</p>";
    return;
  }

  

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Å–±–æ—Ä–∫–∞—Ö
  const uniqueTypes = [...new Set(builds.map(b => b.weapon_type))];
  await Promise.all(uniqueTypes.map(type => loadModules(type)));

  // –¢–µ–ø–µ—Ä—å moduleNameMap —Ç–æ—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω
  builds.forEach(build => {
    const wrapper = document.createElement("div");
    wrapper.className = "build-card";

    const weaponTypeRu = weaponTypeMap[build.weapon_type] || build.weapon_type;
    
    wrapper.innerHTML = `
      <details>
        <summary>
          <div class="build-header">
            <div class="build-title-wrap">
              <h3 class="build-title">${build.title}</h3>
              <div class="top-tags">
                ${[build.top1, build.top2, build.top3].map((mod, i) =>
                  mod ? `<span class="top-tag" style="background:${topColors[i]}">#${i + 1} ${mod}</span>` : ''
                ).join('')}
              </div>
            </div>
             <div class="build-type"><b>${weaponTypeLabels[build.weapon_type] || build.weapon_type}</b></div>
          </div>
        </summary>
    
        <div class="tab-buttons">
          ${build.tabs.map((tab, i) =>
            `<button class="tab-btn" data-index="${i}">${tab.label}</button>`
          ).join('')}
        </div>
    
        <div class="tab-content">
          ${build.tabs.map((tab, i) => `
            <div class="tab-panel" style="${i === 0 ? '' : 'display:none;'}">
              ${tab.items.map(item => `
                <div class="mod-block">${moduleNameMap[item] || item}</div>
              `).join('')}
            </div>
          `).join('')}
        </div>
      </details>
    `;


    // —Ç–∞–±—ã
    setTimeout(() => {
      const buttons = wrapper.querySelectorAll(".tab-btn");
      const panels = wrapper.querySelectorAll(".tab-panel");
      buttons.forEach((btn, i) => {
        btn.addEventListener("click", () => {
          panels.forEach(p => p.style.display = "none");
          panels[i].style.display = "block";
        });
      });
    }, 0);

    buildsList.appendChild(wrapper);
  });
}


// === –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø—ã –æ—Ä—É–∂–∏—è
loadWeaponTypes();


// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ===
document.getElementById('back-to-main').addEventListener('click', () => {
  buildForm.style.display = 'none';
  buildsList.style.display = 'none';
  
  // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–æ–ª–µ–π (–Ω–∞–∑–∞–¥ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω)
  roleButtons.style.display = 'block';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const isAdmin = ADMIN_IDS.includes(user.id);
  if (isAdmin) {
    addBtn.style.display = 'inline-block';
  }
});


// const tg = window.Telegram.WebApp;

document.getElementById('help-btn')?.addEventListener('click', () => {
  // –ó–∞–º–µ–Ω–∏—Ç–µ your_tg_username –Ω–∞ –≤–∞—à Telegram‚Äë–Ω–∏–∫
  const url = 'https://t.me/ndzone_admin';
  tg.openLink(url);
});
