/* ==========================================================
   swipe-back.js ‚Äî Edge Swipe Back –¥–ª—è Telegram WebApp
   –ê–≤—Ç–æ—Ä: –†–∞–≤–∏–ª—å-–ø—Ä–æ—à–∏–±–∞—Ç–µ–ª—å –∫–Ω–æ–ø–æ–∫ üòé (–Ω—É –∏ —è –ø–æ–º–æ–≥)
   –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –¢–ó: iOS/Android/Desktop WebView, –±–µ–∑ –ª–∏–±,
   —Ç–æ–ª—å–∫–æ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è (<= 40px), –Ω–µ –º–µ—à–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É
   —Å–∫—Ä–æ–ª–ª—É, –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è, –≤–∏–±—Ä–∞/—Ö–∞–ø—Ç–∏–∫–∞, velocity > 0.3,
   –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ #screen-home, —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–±—ã—á–Ω—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º.
   –ü–æ–¥–∫–ª—é—á–∞—Ç—å –ø–æ—Å–ª–µ app.js.
   ========================================================== */

(function () {
  'use strict';

  // --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
  const EDGE_START_PX = 40;               // –∑√≥na —Å—Ç–∞—Ä—Ç–∞ —É –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
  const COMPLETE_DISTANCE_PX = 80;        // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
  const VELOCITY_THRESHOLD = 0.3;         // px/ms ‚Äî "–±—ã—Å—Ç—Ä—ã–π —Å–≤–∞–π–ø"
  const ACTIVATE_MOVE_THRESHOLD = 8;      // –ø–∏–∫—Å–µ–ª–µ–π –¥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
  const ANIM_MS = 220;                    // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è/–æ—Ç–∫–∞—Ç–∞
  const EASE = 'cubic-bezier(.22,.61,.36,1)';

  let dragging = false;
  let decided = false;
  let horizontal = false;

  let startX = 0;
  let startY = 0;
  let lastX = 0;
  let lastTime = 0;
  let startTime = 0;
  let instVX = 0;

  let activeEl = null;
  let scrimEl = null;
  let rafId = 0;

  function getActiveScreen() {
    // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º .screen.active; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∏–¥–∏–º—É—é
    let el = document.querySelector('.screen.active');
    if (!el) {
      const screens = Array.from(document.querySelectorAll('.screen'));
      el = screens.find(s => s.style.display !== 'none') || null;
      if (el && !el.classList.contains('active')) el.classList.add('active');
    }
    return el;
  }

  function hasPrevInHistory() {
    return Boolean(window.screenHistory?.[window.screenHistory.length - 1]);
  }

  function haptic() {
    try { Telegram.WebApp.HapticFeedback.impactOccurred("light"); } catch {}
    if (navigator.vibrate) {
      try { navigator.vibrate(15); } catch {}
    }
  }

  function createScrimIfNeeded() {
    if (!scrimEl) {
      scrimEl = document.createElement('div');
      scrimEl.id = 'swipe-back-scrim';
      Object.assign(scrimEl.style, {
        position: 'fixed',
        left: '0',
        top: '0',
        width: '100%',
        height: '100%',
        pointerEvents: 'none',
        background: 'linear-gradient(to right, rgba(0,0,0,0.25), rgba(0,0,0,0))',
        opacity: '0',
        transition: 'opacity 150ms ease',
        zIndex: '999'
      });
      document.body.appendChild(scrimEl);
    } else {
      scrimEl.style.opacity = '0';
    }
  }

  function setTranslate(x) {
    if (!activeEl) return;
    if (rafId) cancelAnimationFrame(rafId);
    rafId = requestAnimationFrame(() => {
      activeEl.style.transform = `translate3d(${x}px,0,0)`;
      activeEl.style.boxShadow = '0 0 16px rgba(0,0,0,0.25)';
      if (scrimEl) {
        const progress = Math.min(1, x / 120);
        scrimEl.style.opacity = String(progress * 0.6);
      }
    });
  }

  function cleanupStyles() {
    if (activeEl) {
      activeEl.style.transition = '';
      activeEl.style.transform = '';
      activeEl.style.willChange = '';
      activeEl.style.boxShadow = '';
      activeEl.style.touchAction = '';
    }
    if (scrimEl) scrimEl.style.opacity = '0';
  }

  function cancelGesture() {
    dragging = false;
    decided = false;
    horizontal = false;
    cleanupStyles();
    removeMoveEndListeners();
    activeEl = null;
  }

  function finishGesture(complete) {
    if (!activeEl) {
      cancelGesture();
      return;
    }

    const el = activeEl;
    el.style.transition = `transform ${ANIM_MS}ms ${EASE}`;

    if (complete) {
      // –£–µ–∑–∂–∞–µ–º –≤–ø—Ä–∞–≤–æ, –∑–∞—Ç–µ–º –Ω–∞–≤–∏–≥–∏—Ä—É–µ–º –Ω–∞–∑–∞–¥
      const width = Math.max(window.innerWidth, el.offsetWidth || 0);
      let done = false;
      const onTe = () => {
        if (done) return;
        done = true;
        el.removeEventListener('transitionend', onTe);
        cleanupStyles();
        const prevId = window.screenHistory?.[window.screenHistory.length - 1];
        if (prevId) {
          window.isGoingBack = true;
          haptic();
          window.showScreen(prevId);
        }
        activeEl = null;
      };
      el.addEventListener('transitionend', onTe);
      // –¥–≤–æ–π–Ω–æ–π rAF, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ transition –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      requestAnimationFrame(() => requestAnimationFrame(() => {
        el.style.transform = `translate3d(${width}px,0,0)`;
        if (scrimEl) scrimEl.style.opacity = '0';
      }));
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ
      const onTe = () => {
        el.removeEventListener('transitionend', onTe);
        cleanupStyles();
        activeEl = null;
      };
      el.addEventListener('transitionend', onTe);
      requestAnimationFrame(() => {
        el.style.transform = 'translate3d(0,0,0)';
      });
    }

    dragging = false;
    decided = false;
    horizontal = false;
    removeMoveEndListeners();
  }

  function onStart(e) {
    if (dragging) return;

    const isTouch = e.type === 'touchstart';
    const point = isTouch ? e.touches[0] : e;
    if (!point) return;

    // –¢–æ–ª—å–∫–æ –æ—Ç —Å–∞–º–æ–≥–æ –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    if (point.clientX > EDGE_START_PX) return;

    // –ù–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º –Ω–∞ –∏–Ω–ø—É—Ç–∞—Ö/textarea/select –∏–ª–∏ contentEditable
    const target = e.target;
    const tag = (target?.tagName || '').toLowerCase();
    if (['input', 'textarea', 'select'].includes(tag)) return;
    if (target?.isContentEditable) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏ —É—Å–ª–æ–≤–∏—è
    activeEl = getActiveScreen();
    if (!activeEl) return;
    if (activeEl.id === 'screen-home') return;              // –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–º
    if (!hasPrevInHistory()) return;                        // –Ω–µ—Ç —ç–∫—Ä–∞–Ω–∞ –Ω–∞–∑–∞–¥ ‚Äî –Ω–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å

    // –ò–Ω–∏—Ü–∏–∞–ª
    dragging = true;
    decided = false;
    horizontal = false;

    startX = lastX = point.clientX;
    startY = point.clientY;
    startTime = lastTime = e.timeStamp || Date.now();
    instVX = 0;

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∏–ª–µ–π
    activeEl.style.willChange = 'transform';
    activeEl.style.transition = 'none';
    activeEl.style.touchAction = 'pan-y'; // –¥–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Å–∫—Ä–æ–ª–ª–∏—Ç—å—Å—è
    createScrimIfNeeded();

    addMoveEndListeners(isTouch);
  }

  function onMove(e) {
    if (!dragging) return;

    const isTouch = e.type === 'touchmove';
    const point = isTouch ? e.touches[0] : e;
    if (!point) return;

    const now = e.timeStamp || Date.now();
    const dx = point.clientX - startX;
    const dy = point.clientY - startY;

    // –ü–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –Ω–µ –º–µ—à–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É —Å–∫—Ä–æ–ª–ª—É
    if (!decided) {
      if (Math.abs(dx) + Math.abs(dy) < ACTIVATE_MOVE_THRESHOLD) return;

      // –í–µ—Ä—Ç–∏–∫–∞–ª—å –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –∂–µ—Å—Ç (–Ω–µ –º–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–µ)
      if (Math.abs(dy) > Math.abs(dx)) {
        cancelGesture();
        return;
      }

      // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ ‚Äî –Ω–µ –Ω–∞—à –∫–µ–π—Å
      if (dx <= 0) {
        cancelGesture();
        return;
      }

      // –†–µ—à–µ–Ω–∏–µ: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø –Ω–∞–∑–∞–¥
      decided = true;
      horizontal = true;
      // –ü–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º —Å–∫—Ä–∏–º
      if (scrimEl) scrimEl.style.opacity = '1';
    }

    if (!horizontal) return;

    // –†–∞–∑ –º—ã –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º –∂–µ—Å—Ç–µ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    e.preventDefault();

    const deltaX = Math.max(0, dx);
    setTranslate(deltaX);

    // –°—á–∏—Ç–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
    const dt = Math.max(1, now - lastTime);
    instVX = (point.clientX - lastX) / dt; // px/ms
    lastX = point.clientX;
    lastTime = now;
  }

  function onEnd(e) {
    if (!dragging) return;

    const now = e.timeStamp || Date.now();
    const totalDx = Math.max(0, lastX - startX);
    const totalDt = Math.max(1, now - startTime);
    const avgVX = totalDx / totalDt; // px/ms

    const complete =
      totalDx >= COMPLETE_DISTANCE_PX ||
      avgVX > VELOCITY_THRESHOLD ||
      instVX > VELOCITY_THRESHOLD;

    finishGesture(complete);
  }

  function addMoveEndListeners(isTouch) {
    if (isTouch) {
      document.addEventListener('touchmove', onMove, { passive: false });
      document.addEventListener('touchend', onEnd, { passive: false });
      document.addEventListener('touchcancel', onEnd, { passive: false });
    } else {
      document.addEventListener('pointermove', onMove, { passive: false });
      document.addEventListener('pointerup', onEnd, { passive: true });
      document.addEventListener('pointercancel', onEnd, { passive: true });
    }
  }

  function removeMoveEndListeners() {
    document.removeEventListener('touchmove', onMove, { passive: false });
    document.removeEventListener('touchend', onEnd, { passive: false });
    document.removeEventListener('touchcancel', onEnd, { passive: false });

    document.removeEventListener('pointermove', onMove, { passive: false });
    document.removeEventListener('pointerup', onEnd, { passive: true });
    document.removeEventListener('pointercancel', onEnd, { passive: true });
  }

  // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—Ç–∞ ---
  if (window.PointerEvent) {
    document.addEventListener('pointerdown', onStart, { passive: true });
  } else {
    // –§–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö iOS/WebView
    document.addEventListener('touchstart', onStart, { passive: true });
    // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –¥–∞–¥–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º—ã—à—å—é (–ª–µ–≤—ã–π –∫–ª–∏–∫+–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ—Ç –∫—Ä–∞—è)
    document.addEventListener('mousedown', function (e) {
      // –∏–º–∏—Ç–∏—Ä—É–µ–º pointerdown –¥–ª—è –º—ã—à–∏
      if (e.button !== 0) return;
      onStart(e);
      if (dragging) {
        const onMouseMove = (ev) => onMove(ev);
        const onMouseUp = (ev) => {
          onEnd(ev);
          document.removeEventListener('mousemove', onMouseMove);
          document.removeEventListener('mouseup', onMouseUp);
        };
        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
      }
    }, { passive: true });
  }

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–∞—ë–º —Å–ø–æ—Å–æ–± –≤—Ä—É—á–Ω—É—é –≤—ã–∫–ª—é—á–∏—Ç—å (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –º–µ—à–∞–µ—Ç)
  window.DisableSwipeBack = function () {
    document.removeEventListener('pointerdown', onStart, { passive: true });
    document.removeEventListener('touchstart', onStart, { passive: true });
  };

})();

