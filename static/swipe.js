// ==========================================
// üì± NDHQ GLOBAL SWIPE SYSTEM (v4.0 FINAL)
// ==========================================
// –†–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç goBack()
// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –æ—Ç–∫–ª–∏–∫, –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è, –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–∫—Ä–æ–ª–ª–∞

(function () {
  let startX = 0;
  let startY = 0;
  let currentX = 0;
  let isSwiping = false;
  let activeScreen = null;
  let allowSwipe = false;
  let startTime = 0;

  const EDGE_ZONE = 25;          // –∑–æ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è)
  const SWIPE_DISTANCE = 80;     // –º–∏–Ω–∏–º—É–º –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
  const MAX_VERTICAL_DRIFT = 60; // –º–∞–∫—Å–∏–º—É–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
  const ELASTICITY = 0.35;       // –ø—Ä—É–∂–∏–Ω–∞
  const SWIPE_TIME_LIMIT = 700;  // –º–∞–∫—Å–∏–º—É–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –º—Å

  window.setupGlobalSwipeBack = function () {
    document.addEventListener("touchstart", onStart, { passive: true });
    document.addEventListener("touchmove", onMove, { passive: false });
    document.addEventListener("touchend", onEnd, { passive: true });
  };

  function onStart(e) {
    const t = e.changedTouches[0];
    startX = t.clientX;
    startY = t.clientY;
    currentX = startX;
    startTime = Date.now();
    isSwiping = false;
    allowSwipe = false;

    // —Å–≤–∞–π–ø —Ç–æ–ª—å–∫–æ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    if (startX > EDGE_ZONE) return;

    activeScreen = document.querySelector(".screen.active");
    if (!activeScreen || activeScreen.id === "screen-home") return;

    allowSwipe = true;
    activeScreen.style.transition = "none";
    activeScreen.style.willChange = "transform, opacity";
  }

  function onMove(e) {
    if (!allowSwipe || !activeScreen) return;

    const t = e.changedTouches[0];
    currentX = t.clientX;
    const deltaX = currentX - startX;
    const deltaY = Math.abs(t.clientY - startY);

    // –µ—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º —Å–≤–∞–π–ø
    if (deltaY > MAX_VERTICAL_DRIFT) {
      resetPosition();
      return;
    }

    // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–≤–∞–π–ø —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
    if (!isSwiping && deltaX > 10) {
      isSwiping = true;
    }

    if (isSwiping && deltaX > 0) {
      e.preventDefault(); // –±–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
      const shift = deltaX * ELASTICITY;
      activeScreen.style.transform = `translateX(${shift}px)`;
      activeScreen.style.opacity = `${1 - Math.min(deltaX / 300, 0.3)}`;
    }
  }

  function onEnd() {
    if (!allowSwipe || !activeScreen) return;

    const deltaX = currentX - startX;
    const deltaT = Date.now() - startTime;
    const velocity = deltaX / deltaT;

    activeScreen.style.transition =
      "transform 0.25s ease-out, opacity 0.25s ease-out";
    activeScreen.style.willChange = "auto";

    const shouldGoBack =
      deltaX > SWIPE_DISTANCE || (velocity > 0.5 && deltaX > 20);

    if (shouldGoBack) {
      triggerGoBack();
    } else {
      resetPosition();
    }

    isSwiping = false;
    allowSwipe = false;
  }

  function resetPosition() {
    if (!activeScreen) return;
    activeScreen.style.transform = "translateX(0)";
    activeScreen.style.opacity = "1";
    setTimeout(() => {
      activeScreen.style.transition = "";
      activeScreen.style.willChange = "";
      activeScreen = null;
    }, 250);
  }

  function triggerGoBack() {
    const current = activeScreen;
    if (!current) return;

    current.style.transform = "translateX(100%)";
    current.style.opacity = "0";

    setTimeout(() => {
      if (typeof window.goBack === "function") {
        window.goBack();
      } else {
        console.warn("‚ö†Ô∏è goBack() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
      }
      if (current) {
        current.style.transform = "";
        current.style.opacity = "";
        current.style.transition = "";
        current.style.willChange = "";
      }
    }, 150);

    // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    try {
      if (window.Telegram?.WebApp?.HapticFeedback) {
        Telegram.WebApp.HapticFeedback.impactOccurred("light");
      } else if (navigator.vibrate) {
        navigator.vibrate(10);
      }
    } catch {}
  }
})();
