// ===============================
// üì¶ VERSION HISTORY LOGIC
// ===============================
console.log("version.js loaded");

let quillVersion;
let isAdminVersion = false;

document.addEventListener("DOMContentLoaded", async () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const me = await fetch("/api/me", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ initData: tg.initData })
  }).then(r => r.json());

  isAdminVersion = me.is_admin;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –∞–¥–º–∏–Ω
  if (isAdminVersion) {
    document.getElementById("version-admin-panel").style.display = "block";
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä Quill
  quillVersion = new Quill("#version-quill", {
    theme: "snow",
    placeholder: "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π
  loadVersions();

  // –û—Ç–∫—Ä—ã—Ç–∏–µ / –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  document.getElementById("version-admin-toggle").addEventListener("click", () => {
    const editor = document.getElementById("version-editor");
    editor.style.display = editor.style.display === "none" ? "block" : "none";
  });

  // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é"
  document.getElementById("version-save-btn").addEventListener("click", saveVersion);
});

// ===============================
// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ä—Å–∏–π
// ===============================
async function loadVersions() {
  const list = document.getElementById("version-list");
  list.innerHTML = "–ó–∞–≥—Ä—É–∑–∫–∞...";

  const versions = await fetch("/api/version").then(r => r.json());
  list.innerHTML = ""; // –û—á–∏—Å—Ç–∏–ª–∏ —Å–ø–∏—Å–æ–∫

  versions.forEach(v => list.appendChild(renderVersionCard(v)));
}

// ===============================
// –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–µ—Ä—Å–∏–∏
// ===============================
function renderVersionCard(v) {
  const card = document.createElement("div");
  card.className = "version-card";

  card.innerHTML = `
    <div class="version-title">${v.version} ‚Äì ${v.title}</div>
    <div class="version-date">üóì ${v.created_at}</div>
    <div class="version-content-preview">${v.content.substring(0, 120)}...</div>
    <button class="version-toggle">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</button>
    <div class="version-content-full" style="display:none;">${v.content}</div>
    ${isAdminVersion ? `
      <div class="version-actions">
        <button class="edit"
          data-id="${v.id}"
          data-version="${v.version}"
          data-title="${v.title}"
          data-content='${encodeURIComponent(v.content)}'>‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        <button class="delete" data-id="${v.id}">üóë –£–¥–∞–ª–∏—Ç—å</button>
      </div>` : ""}
  `;

  // —á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
  card.querySelector(".version-toggle").addEventListener("click", () => {
    card.querySelector(".version-content-full").style.display = "block";
    card.querySelector(".version-toggle").style.display = "none";
  });

  // —É–¥–∞–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é
  if (isAdminVersion) {
    card.querySelector(".delete").addEventListener("click", () => deleteVersion(v.id));

    // —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é
    card.querySelector(".edit").addEventListener("click", (e) => {
      const btn = e.target;
      const id = btn.dataset.id;
      const version = btn.dataset.version;
      const title = btn.dataset.title;
      const content = decodeURIComponent(btn.dataset.content);

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
      document.getElementById("version-editor").style.display = "block";
      document.getElementById("version-input").value = version;
      document.getElementById("version-title-input").value = title;
      quillVersion.root.innerHTML = content;

      // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      const saveBtn = document.getElementById("version-save-btn");
      saveBtn.textContent = "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è";
      saveBtn.onclick = () => updateVersion(id);
    });
  }

  return card;
}

// ===============================
// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
// ===============================
async function saveVersion() {
  const version = document.getElementById("version-input").value.trim();
  const title = document.getElementById("version-title-input").value.trim();
  const content = quillVersion.root.innerHTML;

  if (!version || !title || !content) {
    alert("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!");
    return;
  }

  const res = await fetch("/api/version", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ version, title, content, initData: tg.initData })
  }).then(r => r.json());

  if (res.status === "ok") {
    loadVersions();
    quillVersion.root.innerHTML = "";
    document.getElementById("version-title-input").value = "";
    document.getElementById("version-input").value = "";
  } else {
    alert("–û—à–∏–±–∫–∞: " + res.detail);
  }
}

// ===============================
// –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é
// ===============================
async function updateVersion(id) {
  const version = document.getElementById("version-input").value.trim();
  const title = document.getElementById("version-title-input").value.trim();
  const content = quillVersion.root.innerHTML;

  if (!version || !title || !content) {
    alert("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!");
    return;
  }

  const res = await fetch(`/api/version/${id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ version, title, content, initData: tg.initData })
  }).then(r => r.json());

  if (res.status === "ok") {
    loadVersions();
    document.getElementById("version-editor").style.display = "none";
  } else {
    alert("–û—à–∏–±–∫–∞: " + res.detail);
  }
}

// ===============================
// –£–¥–∞–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é
// ===============================
async function deleteVersion(id) {
  if (!confirm("–£–¥–∞–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –Ω–∞–≤—Å–µ–≥–¥–∞?")) return;

  const res = await fetch(`/api/version/${id}`, {
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ initData: tg.initData })
  }).then(r => r.json());

  if (res.status === "ok") {
    loadVersions();
  } else {
    alert("–û—à–∏–±–∫–∞: " + res.detail);
  }
}
