document.addEventListener("DOMContentLoaded", () => {
  // ‚Äî‚Äî‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const BF_SETTINGS_CATEGORIES = [
    { key: 'accessibility', en: 'Accessibility',    ru: '–û—Å–Ω–æ–≤–Ω—ã–µ' },
    { key: 'gameplay',      en: 'Gameplay',         ru: '–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å' },
    { key: 'campaign',      en: 'Campaign',         ru: '–ö–∞–º–ø–∞–Ω–∏—è' },
    { key: 'controller',    en: 'Controller',       ru: '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä' },
    { key: 'mousekeyboard', en: 'Mouse & Keyboard', ru: '–ú—ã—à—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞' },
    { key: 'graphics',      en: 'Graphics',         ru: '–ì—Ä–∞—Ñ–∏–∫–∞' },
    { key: 'audio',         en: 'Audio',            ru: '–ó–≤—É–∫' },
    { key: 'system',        en: 'System',           ru: '–°–∏—Å—Ç–µ–º–∞' },
  ];

  // ‚Äî‚Äî‚Äî –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const scrView = document.getElementById('screen-bf-settings');
  const btnViewBack = document.getElementById('bf-settings-back');
  const btnBurger = document.getElementById('bf-settings-burger');
  const drawer = document.getElementById('bf-settings-drawer');
  const overlay = document.getElementById('bf-settings-overlay');
  const catsNav = document.getElementById('bf-settings-categories');
  const content = document.getElementById('bf-settings-content');
  const currentTitle = document.getElementById('bf-settings-current-title');


  // === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–≤–µ—Ä–ª–µ—è ===
  const subOverlay = document.getElementById('bf-subsettings-overlay');
  const subOverlayTitleEn = document.getElementById('bf-subsettings-title-en');
  const subOverlayTitleRu = document.getElementById('bf-subsettings-title-ru');
  const subOverlayList = document.getElementById('bf-subsettings-list');
  const subOverlayClose = document.getElementById('bf-close-subsettings');

  // ‚Äî‚Äî‚Äî –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const btnOpenUser = document.getElementById('bf-settings-btn');

  // ‚Äî‚Äî‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ
  let currentCategoryKey = 'accessibility';
  let currentSubSettings = [];

  // ‚Äî‚Äî‚Äî API
  async function apiGetSettings(categoryKey = '') {
    const url = categoryKey
      ? `/api/bf/settings?category=${encodeURIComponent(categoryKey)}`
      : '/api/bf/settings';
    const r = await fetch(url);
    if (!r.ok) throw new Error('Failed to load settings');
    return r.json();
  }

  // ‚Äî‚Äî‚Äî –£—Ç–∏–ª–∏—Ç—ã
  function categoryByKey(key) {
    return BF_SETTINGS_CATEGORIES.find(c => c.key === key) || BF_SETTINGS_CATEGORIES[0];
  }

  function openDrawer() {
    drawer.style.left = '0';
    overlay.style.display = 'block';
    drawer.setAttribute('aria-hidden', 'false');
  }

  function closeDrawer() {
    drawer.style.left = '-320px';
    overlay.style.display = 'none';
    drawer.setAttribute('aria-hidden', 'true');
  }

  // ‚Äî‚Äî‚Äî –†–µ–Ω–¥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  function renderCategoriesNav() {
    catsNav.innerHTML = '';
    BF_SETTINGS_CATEGORIES.forEach(cat => {
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.className = 'btn';
      btn.style.textAlign = 'left';
      btn.textContent = `${cat.en} ‚Äî ${cat.ru}`;
      btn.dataset.key = cat.key;
      btn.onclick = () => {
        document.querySelectorAll('#bf-settings-categories button').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        currentCategoryKey = cat.key;
        currentTitle.innerHTML = `${cat.en} <span class="cat-ru">${cat.ru}</span>`;
        closeDrawer();
        renderUserSettings();
      };
      catsNav.appendChild(btn);
    });
  }

  // ‚Äî‚Äî‚Äî –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫–∏ –æ–¥–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  function renderUserSettingRow(item) {
    const wrap = document.createElement('div');
    wrap.className = 'setting-row';

    const info = document.createElement('div');
    info.className = 'setting-info';
    info.innerHTML = `
      <div class="title-en">${item.title_en || ''}</div>
      <div class="title-ru">${item.title_ru || ''}</div>
    `;

    const control = document.createElement('div');
    control.className = 'setting-control';

    switch (item.type) {
      case 'toggle': {
        const toggle = document.createElement('div');
        toggle.className = 'bf-toggle';
      
        // —Å–æ–∑–¥–∞—ë–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç—É–º–±–ª–µ—Ä –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        toggle.innerHTML = `
          <div class="bf-toggle-track">
            <div class="bf-toggle-knob"></div>
          </div>
          <div class="bf-toggle-labels">
            <span class="on-label">ON / –í–ö–õ</span>
            <span class="off-label">OFF / –í–´–ö–õ</span>
          </div>
        `;
      
        // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const isOn = item.default === 'true' || item.default === true;
        if (isOn) toggle.classList.add('on');
        control.appendChild(toggle);
        break;
      }
      case 'slider': {
        const valLabel = document.createElement('span');
        valLabel.textContent = item.default || '0';
        const rng = document.createElement('input');
        rng.type = 'range';
        rng.disabled = true;
        rng.value = item.default || 0;
        control.appendChild(valLabel);
        control.appendChild(rng);
        break;
      }
      case 'number': {
        const num = document.createElement('input');
        num.type = 'number';
        num.disabled = true;
        num.value = item.default ?? '';
        control.appendChild(num);
        break;
      }
      case 'select': {
        const selectWrap = document.createElement('div');
        selectWrap.className = 'bf-select-wrap';
      
        const sel = document.createElement('select');
        sel.className = 'bf-select';
      
        // üó£Ô∏è –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è Battlefield Settings (EN ‚Üí RU)
        const translationMap = {
          // –†–∞–∑–º–µ—Ä—ã –∏ –º–∞—Å—à—Ç–∞–±—ã
          "Tiny": "–ö—Ä–æ—à–µ—á–Ω—ã–π",
          "Small": "–ú–∞–ª–µ–Ω—å–∫–∏–π",
          "Medium": "–°—Ä–µ–¥–Ω–∏–π",
          "Normal": "–û–±—ã—á–Ω—ã–π",
          "Large": "–ë–æ–ª—å—à–æ–π",
          "Huge": "–û–≥—Ä–æ–º–Ω—ã–π",
          "Default": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
          "Custom": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π",
          "Auto": "–ê–≤—Ç–æ",
        
          // –ö–æ–Ω—Ç—Ä–∞—Å—Ç, —è—Ä–∫–æ—Å—Ç—å, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã
          "High Contrast": "–í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç",
          "Low Contrast": "–ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç",
          "Brightness": "–Ø—Ä–∫–æ—Å—Ç—å",
          "Contrast": "–ö–æ–Ω—Ç—Ä–∞—Å—Ç",
          "Colorblind Mode": "–†–µ–∂–∏–º –¥–∞–ª—å—Ç–æ–Ω–∏–∫–∞",
          "Tritanopia": "–¢—Ä–∏—Ç–∞–Ω–æ–ø–∏—è",
          "Deuteranopia": "–î–µ–π—Ç–µ—Ä–∞–Ω–æ–ø–∏—è",
          "Protanopia": "–ü—Ä–æ—Ç–∞–Ω–æ–ø–∏—è",
          "Off": "–í—ã–∫–ª",
          "On": "–í–∫–ª",
          "Enabled": "–í–∫–ª—é—á–µ–Ω–æ",
          "Disabled": "–í—ã–∫–ª—é—á–µ–Ω–æ",
        
          // –†–µ–∂–∏–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          "Hold": "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å",
          "Toggle": "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å",
          "Press": "–ù–∞–∂–∞—Ç–∏–µ",
          "Double Tap": "–î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ",
          "Click": "–ö–ª–∏–∫",
          "Release": "–û—Ç–ø—É—Å—Ç–∏—Ç—å",
        
          // –ó–≤—É–∫ –∏ –≥–æ–ª–æ—Å
          "Voice Chat": "–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
          "Push to Talk": "–ù–∞–∂–∞—Ç—å –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
          "Always On": "–í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ",
          "Mute": "–ë–µ–∑ –∑–≤—É–∫–∞",
          "Unmute": "–°–æ –∑–≤—É–∫–æ–º",
          "Headphones": "–ù–∞—É—à–Ω–∏–∫–∏",
          "Speakers": "–ö–æ–ª–æ–Ω–∫–∏",
        
          // –ì—Ä–∞—Ñ–∏–∫–∞
          "Ultra": "–£–ª—å—Ç—Ä–∞",
          "High": "–í—ã—Å–æ–∫–∏–π",
          "Medium": "–°—Ä–µ–¥–Ω–∏–π",
          "Low": "–ù–∏–∑–∫–∏–π",
          "Very Low": "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π",
          "Resolution": "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
          "Fullscreen": "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º",
          "Borderless": "–ë–µ–∑ —Ä–∞–º–∫–∏",
          "Windowed": "–û–∫–æ–Ω–Ω—ã–π",
        
          // –ì–µ–π–º–ø–ª–µ–π
          "Instant": "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ",
          "Partial": "–ß–∞—Å—Ç–∏—á–Ω–æ",
          "All": "–í—Å–µ",
          "Squad": "–û—Ç—Ä—è–¥",
          "Team": "–ö–æ–º–∞–Ω–¥–∞",
          "Solo": "–û–¥–∏–Ω",
          "Prioritize Interact": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ",
          "Prioritize Reload": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞",
          "Stand": "–°—Ç–æ—è—Ç—å",
          "Crouch": "–ü—Ä–∏—Å–µ—Å—Ç—å",
          "Prone": "–õ–µ—á—å",
          "Sprint": "–ë–µ–≥",
          "Aim": "–ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ",
          "Fire": "–°—Ç—Ä–µ–ª—å–±–∞",
        
          // –ö–∞–º–µ—Ä–∞ –∏ –≤–≤–æ–¥
          "Mouse": "–ú—ã—à—å",
          "Keyboard": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
          "Controller": "–ì–µ–π–º–ø–∞–¥",
          "Sensitivity": "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
          "Invert Y-Axis": "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—å Y",
          "Horizontal": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ",
          "Vertical": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ",
        
          // –ü—Ä–æ—á–µ–µ
          "Reset": "–°–±—Ä–æ—Å–∏—Ç—å",
          "Apply": "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
          "Save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
          "Back": "–ù–∞–∑–∞–¥",
          "Yes": "–î–∞",
          "No": "–ù–µ—Ç"
        };

      

          (item.options || []).forEach(opt => {
            const o = document.createElement('option');
            const ru = translationMap[opt] || opt;
            o.textContent = `${opt} / ${ru}`;
            if (opt === item.default) o.selected = true;
            sel.appendChild(o);
          });
        
          sel.addEventListener('change', () => {
            console.log(`Selected option for ${item.title_en}:`, sel.value);
          });
        
          const ruLabel = document.createElement('span');
          ruLabel.className = 'bf-select-ru';
          ruLabel.textContent = item.title_ru || '';
        
          selectWrap.append(sel, ruLabel);
          control.appendChild(selectWrap);
          break;
        }
        



        // üü¶ –≤–æ—Ç —Å—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π case
        case 'button': {
          const btn = document.createElement('button');
          btn.className = 'edit-btn';
        
          const title = (item.title_en || '').toLowerCase();
          const isReset = title.includes('reset');
        
            // –¥–≤—É—è–∑—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            btn.innerHTML = isReset
              ? 'RESET <span class="btn-ru">–°–ë–†–û–°–ò–¢–¨</span>'
              : 'EDIT <span class="btn-ru">–†–ï–î–ê–ö–¢</span>';
        
          // –µ—Å–ª–∏ —ç—Ç–æ reset ‚Äî –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
          if (isReset) {
            btn.disabled = true;
            btn.style.opacity = '0.6';
            btn.style.cursor = 'default';
          } else {
            // –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π
            btn.onclick = () => {
              if (Array.isArray(item.subsettings) && item.subsettings.length) {
                openSubsettings(item.title_en, item.title_ru, item.subsettings);
              } else {
                alert('–í–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç');
              }
            };
          }
        
          control.appendChild(btn);
          break;
        }





        case 'color': {
          const colorWrap = document.createElement('div');
          colorWrap.style.display = 'flex';
          colorWrap.style.alignItems = 'center';
          colorWrap.style.gap = '10px';
        
          const colorBox = document.createElement('div');
          colorBox.className = 'color-preview';
          colorBox.style.backgroundColor = item.default || '#000';
          colorBox.title = item.default;
          colorBox.style.width = '28px';
          colorBox.style.height = '28px';
          colorBox.style.borderRadius = '4px';
          colorBox.style.border = '1px solid rgba(255,255,255,0.3)';
        
          const colorLabel = document.createElement('span');
          colorLabel.textContent = item.default?.toUpperCase() || '#000000';
          colorLabel.style.color = '#aaa';
          colorLabel.style.fontSize = '13px';
          colorLabel.style.letterSpacing = '0.5px';
        
          colorWrap.append(colorBox, colorLabel);
          control.append(colorWrap);
          break;
        }

        
      default:
        control.textContent = item.default ?? '';
    }

    wrap.appendChild(info);
    wrap.appendChild(control);
    return wrap;
  }

  // ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async function renderUserSettings() {
    content.innerHTML = '<div class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</div>';

    try {
      const data = await apiGetSettings(currentCategoryKey);
      content.innerHTML = '';

      if (!data || !data.length) {
        const p = document.createElement('p');
        p.style.opacity = '.7';
        p.textContent = '–£–∂–µ –≤–µ–¥—ë—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
        content.appendChild(p);
        return;
      }

      let currentSection = '';

      data.forEach(item => {
        if (item.section && item.section !== currentSection) {
          currentSection = item.section;
          const sec = document.createElement('div');
          sec.className = 'bf-section-title';
          const [en, ru] = item.section.split(" ‚Äî ");
          sec.innerHTML = `
            <div class="section-header">
              <span class="section-en">${en || ''}</span>
              ${ru ? `<span class="section-ru">‚Äî ${ru}</span>` : ''}
            </div>
          `;
          content.appendChild(sec);
        }

        content.appendChild(renderUserSettingRow(item));
      });
    } catch (e) {
      content.innerHTML = '<p style="color:#f55">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫</p>';
      console.error(e);
    }
  }


  // === –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –æ–¥–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
    function renderSubSetting(item) {
      const wrap = document.createElement('div');
      wrap.className = 'setting-row';
    
      const info = document.createElement('div');
      info.className = 'setting-info';
      info.innerHTML = `
        <div class="title-en">${item.title_en}</div>
        <div class="title-ru">${item.title_ru || ''}</div>
      `;
    
      const control = document.createElement('div');
      control.className = 'setting-control';
    
      switch (item.type) {
        case 'toggle': {
          const toggle = document.createElement('div');
          toggle.className = 'bf-toggle';
        
          // —Å–æ–∑–¥–∞—ë–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç—É–º–±–ª–µ—Ä –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
          toggle.innerHTML = `
            <div class="bf-toggle-track">
              <div class="bf-toggle-knob"></div>
            </div>
            <div class="bf-toggle-labels">
              <span class="on-label">ON / –í–ö–õ</span>
              <span class="off-label">OFF / –í–´–ö–õ</span>
            </div>
          `;
        
          // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          const isOn = item.default === 'true' || item.default === true;
          if (isOn) toggle.classList.add('on');
          control.appendChild(toggle);
          break;
        }
        case 'slider': {
          const val = document.createElement('span');
          val.textContent = item.default || '0';
          const rng = document.createElement('input');
          rng.type = 'range';
          rng.disabled = true;
          rng.value = item.default || 0;
          control.appendChild(val);
          control.appendChild(rng);
          break;
        }
          case 'select': {
            const selectWrap = document.createElement('div');
            selectWrap.className = 'bf-select-wrap';
          
            const sel = document.createElement('select');
            sel.className = 'bf-select';
          
            // üî† –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            const translationMap = {
              "Tiny": "–ö—Ä–æ—à–µ—á–Ω—ã–π", "Small": "–ú–∞–ª–µ–Ω—å–∫–∏–π", "Medium": "–°—Ä–µ–¥–Ω–∏–π", "Normal": "–û–±—ã—á–Ω—ã–π",
              "Large": "–ë–æ–ª—å—à–æ–π", "Huge": "–û–≥—Ä–æ–º–Ω—ã–π", "Default": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "Custom": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π",
              "Auto": "–ê–≤—Ç–æ", "High Contrast": "–í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç", "Low Contrast": "–ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç",
              "Off": "–í—ã–∫–ª", "On": "–í–∫–ª", "Hold": "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å", "Toggle": "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å",
              "Instant": "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ", "Partial": "–ß–∞—Å—Ç–∏—á–Ω–æ", "All": "–í—Å–µ",
              "Low": "–ù–∏–∑–∫–∏–π", "Medium": "–°—Ä–µ–¥–Ω–∏–π", "High": "–í—ã—Å–æ–∫–∏–π", "Ultra": "–£–ª—å—Ç—Ä–∞"
            };
          
            (item.options || []).forEach(opt => {
              const o = document.createElement('option');
              const ru = translationMap[opt] || opt;
              o.textContent = `${opt} / ${ru}`;
              if (opt === item.default) o.selected = true;
              sel.appendChild(o);
            });
          
            const ruLabel = document.createElement('span');
            ruLabel.className = 'bf-select-ru';
            ruLabel.textContent = item.title_ru || '';
          
            selectWrap.append(sel, ruLabel);
            control.appendChild(selectWrap);
            break;
          }


        case 'color': {
          const colorWrap = document.createElement('div');
          colorWrap.style.display = 'flex';
          colorWrap.style.alignItems = 'center';
          colorWrap.style.gap = '10px';
        
          const colorBox = document.createElement('div');
          colorBox.className = 'color-preview';
          colorBox.style.backgroundColor = item.default || '#000';
          colorBox.title = item.default;
          colorBox.style.width = '28px';
          colorBox.style.height = '28px';
          colorBox.style.borderRadius = '4px';
          colorBox.style.border = '1px solid rgba(255,255,255,0.3)';
        
          const colorLabel = document.createElement('span');
          colorLabel.textContent = item.default?.toUpperCase() || '#000000';
          colorLabel.style.color = '#aaa';
          colorLabel.style.fontSize = '13px';
          colorLabel.style.letterSpacing = '0.5px';
        
          colorWrap.append(colorBox, colorLabel);
          control.append(colorWrap);
          break;
        }



          
        default:
          control.textContent = item.default ?? '';
      }
    
      wrap.appendChild(info);
      wrap.appendChild(control);
      return wrap;
    }
    
    // === –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
    function renderSubsettings(subsettings) {
      subOverlayList.innerHTML = '';
      subsettings.forEach(sub => {
        subOverlayList.appendChild(renderSubSetting(sub));
      });
    }
          
      function openSubsettings(title_en, title_ru, subsettings) {
        currentSubSettings = subsettings;
        subOverlayTitleEn.textContent = title_en;
        subOverlayTitleRu.textContent = title_ru;
        renderSubsettings(subsettings);
      
        // –ø–ª–∞–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
        subOverlay.classList.add('active');
        document.body.style.overflow = 'hidden'; // –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      
        requestAnimationFrame(() => {
          const container = subOverlay.querySelector('.subsettings-container');
          const header = subOverlay.querySelector('.subsettings-header');
          const headerOffset = header ? header.offsetHeight + 60 : 60;
      
          // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É, —á—Ç–æ–±—ã –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –ø—Ä–∏–ª–∏–ø–∞–ª–∞
          container.style.marginTop = `${headerOffset}px`;
      
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
          const availableHeight = window.innerHeight - 40;
          if (container.scrollHeight > availableHeight) {
            // –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ —á–µ–º –æ–∫–Ω–æ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            subOverlay.style.overflowY = 'auto';
          } else {
            // –∏–Ω–∞—á–µ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞
            subOverlay.style.overflowY = 'hidden';
          }
        });
      }
      
      // === –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–≤–µ—Ä–ª–µ—è ===
      subOverlayClose.addEventListener('click', () => {
        subOverlay.classList.remove('active');
        document.body.style.overflow = ''; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      });
      

  // ‚Äî‚Äî‚Äî –ù–∞–≤–∏–≥–∞—Ü–∏—è
  btnViewBack?.addEventListener('click', () => {
    if (typeof showScreen === 'function') showScreen('screen-battlefield-main');
  });

  btnBurger?.addEventListener('click', openDrawer);
  overlay?.addEventListener('click', closeDrawer);

  document.body.style.overflow = '';
  
  // ‚Äî‚Äî‚Äî –û—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
  btnOpenUser?.addEventListener('click', () => {
    renderCategoriesNav();
    const cat = categoryByKey(currentCategoryKey);
    currentTitle.innerHTML = `${cat.en} <span class="cat-ru">${cat.ru}</span>`;
    renderUserSettings();
    if (typeof showScreen === 'function') showScreen('screen-bf-settings');
  });


    // --- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ª–∏–ø–∞–Ω–∏–µ overlay, —á—Ç–æ–±—ã —Å–µ–ª–µ–∫—Ç—ã –±—ã–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
  const observer = new MutationObserver(() => {
    if (overlay.style.display === 'none') {
      overlay.style.pointerEvents = 'none';
    } else {
      overlay.style.pointerEvents = 'auto';
    }
  });
  observer.observe(overlay, { attributes: true, attributeFilter: ['style'] });
  
});
