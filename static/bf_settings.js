document.addEventListener("DOMContentLoaded", () => {
  // ‚Äî‚Äî‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const BF_SETTINGS_CATEGORIES = [
    { key: 'accessibility', en: 'Accessibility',    ru: '–û—Å–Ω–æ–≤–Ω—ã–µ' },
    { key: 'gameplay',      en: 'Gameplay',         ru: '–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å' },
    { key: 'campaign',      en: 'Campaign',         ru: '–ö–∞–º–ø–∞–Ω–∏—è' },
    { key: 'controller',    en: 'Controller',       ru: '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä' },
    { key: 'mousekeyboard', en: 'Mouse & Keyboard', ru: '–ú—ã—à—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞' },
    { key: 'graphics',      en: 'Graphics',         ru: '–ì—Ä–∞—Ñ–∏–∫–∞' },
    { key: 'audio',         en: 'Audio',            ru: '–ó–≤—É–∫' },
    { key: 'system',        en: 'System',           ru: '–°–∏—Å—Ç–µ–º–∞' },
  ];

  // ‚Äî‚Äî‚Äî –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const scrView = document.getElementById('screen-bf-settings');
  const btnViewBack = document.getElementById('bf-settings-back');
  const btnBurger = document.getElementById('bf-settings-burger');
  const drawer = document.getElementById('bf-settings-drawer');
  const overlay = document.getElementById('bf-settings-overlay');
  const catsNav = document.getElementById('bf-settings-categories');
  const content = document.getElementById('bf-settings-content');
  const currentTitle = document.getElementById('bf-settings-current-title');


  // === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–≤–µ—Ä–ª–µ—è ===
  const subOverlay = document.getElementById('bf-subsettings-overlay');
  const subOverlayTitleEn = document.getElementById('bf-subsettings-title-en');
  const subOverlayTitleRu = document.getElementById('bf-subsettings-title-ru');
  const subOverlayList = document.getElementById('bf-subsettings-list');
  const subOverlayClose = document.getElementById('bf-close-subsettings');

  // === –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–¢–ö–†–´–¢–ò–Ø/–ó–ê–ö–†–´–¢–ò–Ø ===
function openSubsettings(title_en, title_ru, subsettings) {
  const overlay = document.getElementById('bf-subsettings-overlay');
  const titleEn = document.getElementById('bf-subsettings-title-en');
  const titleRu = document.getElementById('bf-subsettings-title-ru');
  const list = document.getElementById('bf-subsettings-list');

  titleEn.textContent = title_en || '';
  titleRu.textContent = title_ru || '';
  list.innerHTML = '';

  if (!Array.isArray(subsettings) || !subsettings.length) {
    list.innerHTML = `<p style="opacity:.6;text-align:center;padding:20px;">–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</p>`;
  } else {
    renderSubsettings(subsettings);
  }

  overlay.classList.add('active');
  document.body.style.overflow = 'hidden';
}

  // ‚Äî‚Äî‚Äî –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
  const btnOpenUser = document.getElementById('bf-settings-btn');

  // ‚Äî‚Äî‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ
  let currentCategoryKey = 'accessibility';
  let currentSubSettings = [];

  // ‚Äî‚Äî‚Äî API
  async function apiGetSettings(categoryKey = '') {
    const url = categoryKey
      ? `/api/bf/settings?category=${encodeURIComponent(categoryKey)}`
      : '/api/bf/settings';
    const r = await fetch(url);
    if (!r.ok) throw new Error('Failed to load settings');
    return r.json();
  }

  // ‚Äî‚Äî‚Äî –£—Ç–∏–ª–∏—Ç—ã
  function categoryByKey(key) {
    return BF_SETTINGS_CATEGORIES.find(c => c.key === key) || BF_SETTINGS_CATEGORIES[0];
  }

  function openDrawer() {
    drawer.style.left = '0';
    overlay.style.display = 'block';
    drawer.setAttribute('aria-hidden', 'false');
  }

  function closeDrawer() {
    drawer.style.left = '-320px';
    overlay.style.display = 'none';
    drawer.setAttribute('aria-hidden', 'true');
  }

  // ‚Äî‚Äî‚Äî –†–µ–Ω–¥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
  function renderCategoriesNav() {
    catsNav.innerHTML = '';
    BF_SETTINGS_CATEGORIES.forEach(cat => {
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.className = 'btn';
      btn.style.textAlign = 'left';
      btn.textContent = `${cat.en} ‚Äî ${cat.ru}`;
      btn.dataset.key = cat.key;
      btn.onclick = () => {
        document.querySelectorAll('#bf-settings-categories button').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        currentCategoryKey = cat.key;
        currentTitle.innerHTML = `${cat.en} <span class="cat-ru">${cat.ru}</span>`;
        closeDrawer();
        renderUserSettings();
      };
      catsNav.appendChild(btn);
    });
  }

  // ‚Äî‚Äî‚Äî –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫–∏ –æ–¥–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  function renderUserSettingRow(item) {
    const wrap = document.createElement('div');
    wrap.className = 'setting-row';

    const info = document.createElement('div');
    info.className = 'setting-info';
    info.innerHTML = `
      <div class="title-en">${item.title_en || ''}</div>
      <div class="title-ru">${item.title_ru || ''}</div>
    `;

    const control = document.createElement('div');
    control.className = 'setting-control';

    switch (item.type) {
      case 'toggle': {
        const toggle = document.createElement('div');
        toggle.className = 'bf-toggle';
      
        // —Å–æ–∑–¥–∞—ë–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç—É–º–±–ª–µ—Ä –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        toggle.innerHTML = `
          <div class="bf-toggle-track">
            <div class="bf-toggle-knob"></div>
          </div>
          <div class="bf-toggle-labels">
            <span class="on-label">ON / –í–ö–õ</span>
            <span class="off-label">OFF / –í–´–ö–õ</span>
          </div>
        `;
      
        // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const isOn = item.default === 'true' || item.default === true;
        if (isOn) toggle.classList.add('on');
        control.appendChild(toggle);
        break;
      }
      case 'slider': {
        const valLabel = document.createElement('span');
        valLabel.textContent = item.default || '0';
        const rng = document.createElement('input');
        rng.type = 'range';
        rng.disabled = true;
        rng.value = item.default || 0;
        control.appendChild(valLabel);
        control.appendChild(rng);
        break;
      }
      case 'number': {
        const num = document.createElement('input');
        num.type = 'number';
        num.disabled = true;
        num.value = item.default ?? '';
        control.appendChild(num);
        break;
      }
      case 'select':
        control.appendChild(createSelectElement(item));
        break;
      case 'color': {
          const colorWrap = document.createElement('div');
          colorWrap.style.display = 'flex';
          colorWrap.style.alignItems = 'center';
          colorWrap.style.gap = '10px';
        
          const colorBox = document.createElement('div');
          colorBox.className = 'color-preview';
          colorBox.style.backgroundColor = item.default || '#000';
          colorBox.title = item.default;
          colorBox.style.width = '28px';
          colorBox.style.height = '28px';
          colorBox.style.borderRadius = '4px';
          colorBox.style.border = '1px solid rgba(255,255,255,0.3)';
        
          const colorLabel = document.createElement('span');
          colorLabel.textContent = item.default?.toUpperCase() || '#000000';
          colorLabel.style.color = '#aaa';
          colorLabel.style.fontSize = '13px';
          colorLabel.style.letterSpacing = '0.5px';
        
          colorWrap.append(colorBox, colorLabel);
          control.append(colorWrap);
          break;
        }
        case 'button': {
          const btn = document.createElement('button');
          btn.className = 'edit-btn';
        
          const title = (item.title_en || '').toLowerCase();
          const isReset = title.includes('reset');
        
          btn.innerHTML = isReset
            ? 'RESET <span class="btn-ru">–°–ë–†–û–°–ò–¢–¨</span>'
            : 'EDIT <span class="btn-ru">–†–ï–î–ê–ö–¢</span>';
        
          if (isReset) {
            btn.disabled = true;
            btn.style.opacity = '0.6';
            btn.style.cursor = 'default';
          } else {
            btn.onclick = () => {
              if (Array.isArray(item.subsettings) && item.subsettings.length) {
                openSubsettings(item.title_en, item.title_ru, item.subsettings);
              } else {
                alert('–í–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç');
              }
            };
          }
        
          control.appendChild(btn);
          break;
        }
      default:
        control.textContent = item.default ?? '';
    }

    wrap.appendChild(info);
    wrap.appendChild(control);
    return wrap;
  }

  // ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async function renderUserSettings() {
    content.innerHTML = '<div class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</div>';

    try {
      const data = await apiGetSettings(currentCategoryKey);
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', data);
      data.forEach(i => {
        if (i.subsettings) console.log(`üîπ ${i.title_en} ‚Äî –≤–ª–æ–∂–µ–Ω–∏–π:`, i.subsettings.length);
      });
      content.innerHTML = '';

      if (!data || !data.length) {
        const p = document.createElement('p');
        p.style.opacity = '.7';
        p.textContent = '–£–∂–µ –≤–µ–¥—ë—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
        content.appendChild(p);
        return;
      }

      let currentSection = '';

      data.forEach(item => {
        if (item.section && item.section !== currentSection) {
          currentSection = item.section;
          const sec = document.createElement('div');
          sec.className = 'bf-section-title';
          const [en, ru] = item.section.split(" ‚Äî ");
          sec.innerHTML = `
            <div class="section-header">
              <span class="section-en">${en || ''}</span>
              ${ru ? `<span class="section-ru">‚Äî ${ru}</span>` : ''}
            </div>
          `;
          content.appendChild(sec);
        }

        content.appendChild(renderUserSettingRow(item));
      });
    } catch (e) {
      content.innerHTML = '<p style="color:#f55">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫</p>';
      console.error(e);
    }
  }



  // ‚Äî‚Äî‚Äî –ù–∞–≤–∏–≥–∞—Ü–∏—è
  btnViewBack?.addEventListener('click', () => {
    if (typeof showScreen === 'function') showScreen('screen-battlefield-main');
  });

  btnBurger?.addEventListener('click', openDrawer);
  overlay?.addEventListener('click', closeDrawer);

  document.body.style.overflow = '';
  
  // ‚Äî‚Äî‚Äî –û—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
  btnOpenUser?.addEventListener('click', () => {
    renderCategoriesNav();
    const cat = categoryByKey(currentCategoryKey);
    currentTitle.innerHTML = `${cat.en} <span class="cat-ru">${cat.ru}</span>`;
    renderUserSettings();
    if (typeof showScreen === 'function') showScreen('screen-bf-settings');
  });


    // --- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ª–∏–ø–∞–Ω–∏–µ overlay, —á—Ç–æ–±—ã —Å–µ–ª–µ–∫—Ç—ã –±—ã–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã
  const observer = new MutationObserver(() => {
    if (overlay.style.display === 'none') {
      overlay.style.pointerEvents = 'none';
    } else {
      overlay.style.pointerEvents = 'auto';
    }
  });
  observer.observe(overlay, { attributes: true, attributeFilter: ['style'] });


// === –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
// === –£–õ–£–ß–®–ï–ù–ù–´–ô –†–ï–ù–î–ï–† –ü–û–î–ù–ê–°–¢–†–û–ï–ö ===
function renderSubsettings(subsettings) {
  const list = document.getElementById('bf-subsettings-list');
  list.innerHTML = '';

  const items = Array.isArray(subsettings) ? subsettings : [];
  if (!items.length) {
    list.innerHTML = `
      <div class="empty-state">
        <div style="font-size: 48px; margin-bottom: 16px;">üîß</div>
        <div style="font-size: 16px; margin-bottom: 8px;">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</div>
        <div style="font-size: 14px; opacity: 0.7;">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
      </div>
    `;
    return;
  }

  let currentSection = null;

  items.forEach((item, index) => {

    // === –†–µ–Ω–¥–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–µ–∫—Ü–∏–π (–∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º) ===
    if (item.section && item.section !== currentSection) {
      currentSection = item.section;
      const sec = document.createElement('div');
      sec.className = 'bf-section-title';

      // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "EN ‚Äî RU" –µ—Å–ª–∏ –º—ã –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–≤–æ–¥
      const parts = String(item.section).split(" ‚Äî ");
      const en = parts[0] || "";
      const ru = parts[1] || "";

      sec.innerHTML = `
        <div class="section-header">
          <span class="section-en">${en}</span>
          ${ru ? `<span class="section-ru">‚Äî ${ru}</span>` : ''}
        </div>
      `;
      list.appendChild(sec);
    }

    // === –í–ê–ñ–ù–û: –≤–Ω—É—Ç—Ä–∏ subsettings –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–Ω–æ–ø–æ–∫ ===
    if (item.type === "button") return;

    // === –û–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
    const row = createSubsettingRow(item, index);
    list.appendChild(row);
  });
}


// –°–û–ó–î–ê–ù–ò–ï –û–î–ù–û–ô –°–¢–†–û–ö–ò –ù–ê–°–¢–†–û–ô–ö–ò
function createSubsettingRow(item, index) {
  if (!item || typeof item !== 'object') {
    return createErrorRow(item, new Error('Invalid data'));
  }
  
  const wrap = document.createElement('div');
  wrap.className = 'setting-row';
  wrap.setAttribute('data-setting-type', item.type || 'unknown');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
  wrap.style.opacity = '0';
  wrap.style.transform = 'translateY(20px)';
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å
  const info = document.createElement('div');
  info.className = 'setting-info';
  info.innerHTML = `
    <div class="title-en">${escapeHtml(item.title_en || 'Setting')}</div>
    <div class="title-ru">${escapeHtml(item.title_ru || '')}</div>
  `;
  
  // –ö–æ–Ω—Ç—Ä–æ–ª—ã
  const control = document.createElement('div');
  control.className = 'setting-control';
  
  renderControlBasedOnType(control, item);
  
  wrap.appendChild(info);
  wrap.appendChild(control);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    wrap.style.transition = 'all 0.4s ease';
    wrap.style.opacity = '1';
    wrap.style.transform = 'translateY(0)';
  }, index * 80);
  
  return wrap;
}

// –†–ï–ù–î–ï–† –ö–û–ù–¢–†–û–õ–û–í –ü–û –¢–ò–ü–£
function renderControlBasedOnType(container, item) {
  const type = item.type || 'text';
  const value = item.default || '';
  
  switch (type) {
    case 'toggle':
      renderToggleControl(container, value);
      break;
    case 'select':
      container.appendChild(createSelectElement(item));
      break;
    case 'color':
      renderColorControl(container, value);
      break;
    case 'slider':
      renderSliderControl(container, value);
      break;
    case 'number':
      renderNumberControl(container, value);
      break;
    case 'bind': {
      const span = document.createElement('span');
      span.textContent = item.default || '–ù–∞–∑–Ω–∞—á–∏—Ç—å';
      span.style.opacity = '0.8';
      container.appendChild(span);
      break;
    }
    case 'button':
      // –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ subsettings –Ω–µ—Ç
      break;
    default:
      renderTextControl(container, value);
  }
}



function renderSliderControl(container, value) {
  const wrap = document.createElement('div');
  wrap.className = 'slider-control';

  const valLabel = document.createElement('span');
  valLabel.textContent = value || '0';
  valLabel.style.fontSize = '13px';
  valLabel.style.color = '#a8b5c2';

  const slider = document.createElement('input');
  slider.type = 'range';
  slider.disabled = true;
  slider.value = value || 0;
  slider.style.width = '100%';

  wrap.appendChild(valLabel);
  wrap.appendChild(slider);
  container.appendChild(wrap);
}


function createSelectElement(item) {
  const selectWrap = document.createElement('div');
  selectWrap.className = 'bf-select-wrap';

  const sel = document.createElement('select');
  sel.className = 'bf-select';

  const translationMap = {
    "Tiny": "–ö—Ä–æ—à–µ—á–Ω—ã–π", "Small": "–ú–∞–ª–µ–Ω—å–∫–∏–π", "Medium": "–°—Ä–µ–¥–Ω–∏–π", "Normal": "–û–±—ã—á–Ω—ã–π",
    "Large": "–ë–æ–ª—å—à–æ–π", "Huge": "–û–≥—Ä–æ–º–Ω—ã–π", "Default": "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "Custom": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", "Auto": "–ê–≤—Ç–æ",
    "High Contrast": "–í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç", "Low Contrast": "–ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç",
    "Off": "–í—ã–∫–ª", "On": "–í–∫–ª", "Enabled": "–í–∫–ª—é—á–µ–Ω–æ", "Disabled": "–í—ã–∫–ª—é—á–µ–Ω–æ",
    "Hold": "–£–¥–µ—Ä–∂–∏–≤–∞—Ç—å", "Toggle": "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å", "Press": "–ù–∞–∂–∞—Ç–∏–µ", "Double Tap": "–î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ",
    "Click": "–ö–ª–∏–∫", "Release": "–û—Ç–ø—É—Å—Ç–∏—Ç—å", "Voice Chat": "–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
    "Push to Talk": "–ù–∞–∂–∞—Ç—å –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", "Always On": "–í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ", "Mute": "–ë–µ–∑ –∑–≤—É–∫–∞", "Unmute": "–°–æ –∑–≤—É–∫–æ–º",
    "Headphones": "–ù–∞—É—à–Ω–∏–∫–∏", "Speakers": "–ö–æ–ª–æ–Ω–∫–∏", "Ultra": "–£–ª—å—Ç—Ä–∞", "High": "–í—ã—Å–æ–∫–∏–π",
    "Medium": "–°—Ä–µ–¥–Ω–∏–π", "Low": "–ù–∏–∑–∫–∏–π", "Very Low": "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π", "Fullscreen": "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º",
    "Borderless": "–ë–µ–∑ —Ä–∞–º–∫–∏", "Windowed": "–û–∫–æ–Ω–Ω—ã–π", "Instant": "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ", "Partial": "–ß–∞—Å—Ç–∏—á–Ω–æ",
    "All": "–í—Å–µ", "Squad": "–û—Ç—Ä—è–¥", "Team": "–ö–æ–º–∞–Ω–¥–∞", "Solo": "–û–¥–∏–Ω",
    "Prioritize Interact": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "Prioritize Reload": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞",
    "Stand": "–°—Ç–æ—è—Ç—å", "Crouch": "–ü—Ä–∏—Å–µ—Å—Ç—å", "Prone": "–õ–µ—á—å", "Sprint": "–ë–µ–≥",
    "Aim": "–ü—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ", "Fire": "–°—Ç—Ä–µ–ª—å–±–∞", "Mouse": "–ú—ã—à—å", "Keyboard": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
    "Controller": "–ì–µ–π–º–ø–∞–¥", "Sensitivity": "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "Invert Y-Axis": "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—å Y",
    "Horizontal": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ", "Vertical": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ", "Reset": "–°–±—Ä–æ—Å–∏—Ç—å", "Apply": "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
    "Save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "Back": "–ù–∞–∑–∞–¥", "Yes": "–î–∞", "No": "–ù–µ—Ç"
  };

  let currentRu = '';

  (item.options || []).forEach(opt => {
    const o = document.createElement('option');
    o.textContent = opt; // ‚ùó —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    if (opt === item.default) {
      o.selected = true;
      currentRu = translationMap[opt] || opt;
    }
    sel.appendChild(o);
  });

  // –µ—Å–ª–∏ default –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ options ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥
  if (!currentRu && item.default)
    currentRu = translationMap[item.default] || item.default;

  const ruBelow = document.createElement('div');
  // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
  if (!currentRu && item.options?.length) {
    const first = item.options[0];
    currentRu = translationMap[first] || first;
  }

  ruBelow.className = 'bf-select-ru';
  ruBelow.textContent = currentRu || '';
  ruBelow.style.fontSize = '12px';
  ruBelow.style.opacity = '0.75';
  ruBelow.style.marginTop = '4px';

  sel.addEventListener('change', () => {
    const selected = sel.value;
    ruBelow.textContent = translationMap[selected] || selected;
  });

  selectWrap.append(sel, ruBelow);
  return selectWrap;
}

  

// –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ù–î–ï–†–´ –ö–û–ù–¢–†–û–õ–û–í
function renderToggleControl(container, value) {
  const isOn = value === 'true' || value === true;
  const toggle = document.createElement('div');
  toggle.className = `bf-toggle ${isOn ? 'on' : ''}`;
  toggle.innerHTML = `
    <div class="bf-toggle-track">
      <div class="bf-toggle-knob"></div>
    </div>
    <div class="bf-toggle-labels">
      <span class="on-label">ON</span>
      <span class="off-label">OFF</span>
    </div>
  `;
  container.appendChild(toggle);
}


function renderColorControl(container, value) {
  const wrap = document.createElement('div');
  wrap.style.display = 'flex';
  wrap.style.alignItems = 'center';
  wrap.style.gap = '12px';
  
  const colorBox = document.createElement('div');
  colorBox.className = 'color-preview';
  colorBox.style.backgroundColor = value || '#000000';
  
  const colorLabel = document.createElement('span');
  colorLabel.textContent = (value || '#000000').toUpperCase();
  colorLabel.style.color = '#a8b5c2';
  colorLabel.style.fontSize = '13px';
  colorLabel.style.fontFamily = 'monospace';
  
  wrap.appendChild(colorBox);
  wrap.appendChild(colorLabel);
  container.appendChild(wrap);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function createErrorRow(item, error) {
  const wrap = document.createElement('div');
  wrap.className = 'setting-row error';
  wrap.innerHTML = `
    <div class="setting-info">
      <div class="title-en">Error Loading Setting</div>
      <div class="title-ru">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${escapeHtml(error?.message || 'Unknown error')}</div>
    </div>
    <div class="setting-control">
      <span style="color: #ff6b6b;">‚ö†Ô∏è</span>
    </div>
  `;
  return wrap;
}


// ü©µ –°–±—Ä–æ—Å —Å–∫—Ä–æ–ª–ª–∞ ‚Äî —á—Ç–æ–±—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—á–∏–Ω–∞–ª–æ —Å–≤–µ—Ä—Ö—É
requestAnimationFrame(() => {
  const list = document.getElementById('bf-subsettings-list');
  list.scrollTop = 0;
});  

document.getElementById('bf-close-subsettings').addEventListener('click', () => {
  document.getElementById('bf-subsettings-overlay').classList.remove('active');
  document.body.style.overflow = '';
});

  
});
