// analytics.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
const Analytics = {
  trackEvent(action, details = {}) {
    try {
      const user = window.Telegram?.WebApp?.initDataUnsafe?.user;
      const platform = window.Telegram?.WebApp?.platform || 'unknown';
      
      console.log(`üìä Tracking: ${action}`, details); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      fetch('/api/analytics', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: user?.id || 'anonymous',
          action: action,
          details: { ...details, platform },
          timestamp: new Date().toISOString()
        })
      }).catch(err => console.error('Analytics error:', err));
    } catch (error) {
      console.error('Analytics trackEvent error:', error);
    }
  },

  trackError(error, details = {}) {
    try {
      const user = window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      console.error('‚ùå Tracking error:', error, details);
      
      fetch('/api/errors', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: user?.id || 'anonymous',
          error: error?.toString() || 'Unknown error',
          details: details,
          timestamp: new Date().toISOString()
        })
      }).catch(err => console.error('Error logging failed:', err));
    } catch (trackError) {
      console.error('Error tracking failed:', trackError);
    }
  }
};

// === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è ===

// –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ (–ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM)
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    Analytics.trackEvent('session_start', {
      platform: window.Telegram?.WebApp?.platform || 'unknown',
      url: window.location.href,
      user_agent: navigator.userAgent
    });
  }, 1000);
});

// –ö–æ–Ω–µ—Ü —Å–µ—Å—Å–∏–∏ (–∫–æ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞—é—Ç WebApp)
if (window.Telegram?.WebApp) {
  window.Telegram.WebApp.onEvent('web_app_close', () => {
    Analytics.trackEvent('session_end');
  });
}

// –ü–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
  Analytics.trackEvent('session_end');
});

// –û—à–∏–±–∫–∏ JS
window.addEventListener('error', (e) => {
  Analytics.trackError(e.message, {
    source: e.filename,
    line: e.lineno,
    column: e.colno,
    url: location.href,
    stack: e.error?.stack
  });
});

window.addEventListener('unhandledrejection', (e) => {
  Analytics.trackError(e.reason, {
    type: 'promise_rejection',
    url: location.href,
    stack: e.reason?.stack
  });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.Analytics = Analytics;
