/* ===========================
   ‚öîÔ∏è BATTLEFIELD BUILDS SCRIPT
   =========================== */
tg = window.Telegram.WebApp;
tg.expand();


// === Ensure global showScreen exists ===
if (typeof window.showScreen === "undefined") {
  window.showScreen = function (id) {
    document.querySelectorAll(".screen").forEach((s) => {
      s.style.display = s.id === id ? "block" : "none";
      s.classList.toggle("active", s.id === id);
    });
    window.scrollTo({ top: 0, behavior: "smooth" });
  };
}


const bfUser = tg.initDataUnsafe?.user || {};
let bfUserInfo = null;

const bfModulesByType = {};
const bfWeaponTypeLabels = {};
let bfCachedBuilds = [];
let bfCurrentEditId = null;
let bfScreenHistory = [];
let bfHasUnsavedChanges = false;

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
document.addEventListener("DOMContentLoaded", async () => {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã, –Ω–æ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
    await bfLoadWeaponTypes();
    console.log("‚úÖ BF module ready (not auto-opened)");
  } catch (e) {
    console.error("BF init error:", e);
  }
});


/* ==============
   üîπ –ù–∞–≤–∏–≥–∞—Ü–∏—è
   ============== */
function bfShowScreen(id) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (bfHasUnsavedChanges && !id.includes("bf-form") && !id.includes("bf-edit-builds")) {
    if (!confirm("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?")) {
      return;
    }
    bfHasUnsavedChanges = false;
  }

  const current = document.querySelector(".screen.active")?.id;
  if (current && current !== id) bfScreenHistory.push(current);

  document.body.classList.remove("warzone-theme");
  document.body.classList.add("bf-theme");

  document.querySelectorAll(".screen").forEach((screen) => {
    if (screen.id === id) {
      screen.classList.add("active");
      screen.style.display = "block";
      requestAnimationFrame(() => {
        screen.style.opacity = "1";
        screen.style.transform = "translateY(0)";
      });
    } else if (screen.classList.contains("active")) {
      screen.style.opacity = "0";
      screen.style.transform = "translateY(10px)";
      setTimeout(() => {
        screen.classList.remove("active");
        screen.style.display = "none";
      }, 200);
    } else {
      screen.style.display = "none";
    }
  });

  window.scrollTo({ top: 0, behavior: "smooth" });
}

document.addEventListener("click", (e) => {
  const btn = e.target.closest(".btn");
  if (btn && btn.textContent.includes("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) {
    document.body.classList.remove("bf-theme");
    document.body.classList.add("warzone-theme");
    console.log("üè† –í–µ—Ä–Ω—É–ª—Å—è –≤ NDHQ ‚Äî —Ç–µ–º–∞ Warzone –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
  }
});


/* ===============================
   üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è
   =============================== */
async function bfLoadWeaponTypes() {
  try {
    const res = await fetch("/data/types-bf.json");
    const types = await res.json();
    const select = document.getElementById("bf-weapon-type");
    if (!select) return;

    select.innerHTML = "";
    types.forEach((t) => {
      const opt = document.createElement("option");
      opt.value = t.key;
      opt.textContent = t.label;
      select.appendChild(opt);
      bfWeaponTypeLabels[t.key] = t.label;
    });
  } catch (err) {
    console.error("Failed to load weapon types:", err);
  }
}

/* ===============================
   üî∏ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–æ–¥—É–ª–µ–π
   =============================== */

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
document.getElementById("bf-modules-dict-btn")?.addEventListener("click", async () => {
  await bfLoadWeaponTypesForModules();
  bfShowScreen("screen-bf-modules-types");
});

// –ù–∞–∑–∞–¥ –∏–∑ —Ç–∏–ø–æ–≤
document.getElementById("bf-back-from-mod-types")?.addEventListener("click", () =>
  bfShowScreen("screen-battlefield-main")
);

// –ù–∞–∑–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
document.getElementById("bf-back-from-mod-list")?.addEventListener("click", () =>
  bfShowScreen("screen-bf-modules-types")
);

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
async function bfLoadWeaponTypesForModules() {
  try {
    const res = await fetch("/data/types-bf.json");
    const types = await res.json();
    const grid = document.getElementById("bf-modules-types-grid");
    grid.innerHTML = "";

    types.forEach((t) => {
      const btn = document.createElement("button");
      btn.className = "modules-type-btn";
      btn.textContent = t.label;
      btn.addEventListener("click", () => bfLoadModulesList(t.key, t.label));
      grid.appendChild(btn);
    });
  } catch (e) {
    console.error("BF modules load error:", e);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –ø–æ —Ç–∏–ø—É
async function bfLoadModulesList(weaponType, label) {
  try {
    const res = await fetch(`/api/bf/modules/${weaponType}`);
    const data = await res.json();
    const title = document.getElementById("bf-modules-title");
    const list = document.getElementById("bf-modules-list");
    title.textContent = `Modules ‚Äî ${label}`;
    list.innerHTML = "";

    for (const category in data) {
      const group = document.createElement("div");
      group.className = "module-group";
      group.innerHTML = `<h4>${category}</h4>`;

      data[category].forEach((mod) => {
        const row = document.createElement("div");
        row.className = "module-row";
        row.innerHTML = `
          <span>${mod.en}</span>
          <button class="btn btn-sm" data-id="${mod.id}">üóë</button>
        `;
        row.querySelector("button").addEventListener("click", async () => {
          if (!confirm(`Delete module ${mod.en}?`)) return;
          await fetch(`/api/bf/modules/${mod.id}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ initData: tg.initData }),
          });
          await bfLoadModulesList(weaponType, label);
        });
        group.appendChild(row);
      });

      list.appendChild(group);
    }

    window.currentBFWeaponType = weaponType;
    bfShowScreen("screen-bf-modules-list");
  } catch (e) {
    console.error("BF modules list error:", e);
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è
document.getElementById("bf-mod-add-btn")?.addEventListener("click", async () => {
  const payload = {
    initData: tg.initData,
    weapon_type: window.currentBFWeaponType,
    category: document.getElementById("bf-mod-category").value.trim(),
    en: document.getElementById("bf-mod-en").value.trim(),
    pos: parseInt(document.getElementById("bf-mod-pos").value) || 0,
  };

  if (!payload.category || !payload.en) {
    alert("All fields are required");
    return;
  }
   
   const resCheck = await fetch(`/api/bf/modules/${payload.weapon_type}`);
   const existing = await resCheck.json();
   const exists = Object.values(existing).some(list =>
     list.some(m => m.category === payload.category && m.en.toLowerCase() === payload.en.toLowerCase())
   );
   
   if (exists) {
     alert("–¢–∞–∫–æ–π –º–æ–¥—É–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
     return;
   }


  try {
    await fetch("/api/bf/modules", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    ["bf-mod-category", "bf-mod-en", "bf-mod-pos"].forEach(
      (id) => (document.getElementById(id).value = "")
    );

    await bfLoadModulesList(payload.weapon_type, bfWeaponTypeLabels[payload.weapon_type]);
    await bfLoadModules(payload.weapon_type);
  } catch (e) {
    alert("Error while adding module");
    console.error(e);
  }
});

/* ===============================
   üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π –¥–ª—è —Å–±–æ—Ä–æ–∫
   =============================== */
async function bfLoadModules(type) {
  try {
    // –ü–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    delete bfModulesByType[type];

    const res = await fetch(`/api/bf/modules/${type}`);
    const byCategory = await res.json();
    const byKey = {};
    const flat = [];

    for (const cat in byCategory) {
      byCategory[cat].forEach((m) => {
        flat.push({ ...m, category: cat });
        byKey[m.en.toLowerCase()] = { en: m.en, category: cat };
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    bfModulesByType[type] = { byCategory, byKey, flat };

    console.log(`‚úÖ –ú–æ–¥—É–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${type}`, bfModulesByType[type]);
  } catch (e) {
    console.error("Failed to load modules for", type, e);
  }
}


/* ===============================
   ‚öôÔ∏è  –î–û–ë–ê–í–õ–ï–ù–ò–ï / –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–ë–û–†–ö–ò
   =============================== */

// === –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É" ===
document.getElementById("bf-add-build-btn")?.addEventListener("click", () => {
  bfCurrentEditId = null;
  bfHasUnsavedChanges = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  document.getElementById("bf-submit-build").textContent = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É";

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  document.getElementById("bf-title").value = "";
  document.getElementById("bf-weapon-type").value = "";
  document.getElementById("bf-top1").value = "";
  document.getElementById("bf-top2").value = "";
  document.getElementById("bf-top3").value = "";
  document.getElementById("bf-build-date").value = new Date().toISOString().split("T")[0];
  document.getElementById("bf-tabs-container").innerHTML = "";

  // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  document.querySelectorAll(".bf-build-category").forEach(cb => cb.checked = false);

  bfShowScreen("screen-bf-form");
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
function bfTrackFormChanges() {
  const formElements = [
    '#bf-title', '#bf-weapon-type', '#bf-top1', '#bf-top2', '#bf-top3', 
    '#bf-build-date', '.bf-build-category', '.tab-label', '.module-select'
  ];

  formElements.forEach(selector => {
    document.querySelectorAll(selector).forEach(element => {
      element.addEventListener('input', () => bfHasUnsavedChanges = true);
      element.addEventListener('change', () => bfHasUnsavedChanges = true);
    });
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", () => {
  bfTrackFormChanges();
});



// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ ===
document.getElementById("bf-add-tab")?.addEventListener("click", () => {
  const type = document.getElementById("bf-weapon-type").value;
  const mods = bfModulesByType[type];
  if (!mods) {
    alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è");
    document.getElementById("bf-weapon-type").focus();
    return;
  }

  const tabDiv = document.createElement("div");
  tabDiv.className = "tab-block";
  tabDiv.innerHTML = `
    <input type="text" class="tab-label form-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏)">
    <div class="mod-selects"></div>
    <div class="tab-actions">
      <button type="button" class="btn add-mod">+ –ú–æ–¥—É–ª—å</button>
      <button type="button" class="btn delete-tab">üóë –£–¥–∞–ª–∏—Ç—å –≤–∫–ª–∞–¥–∫—É</button>
    </div>
  `;

  document.getElementById("bf-tabs-container").appendChild(tabDiv);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  setTimeout(() => {
    bfAddModuleRow(tabDiv, type);
    bfSyncAllTabs(); // ‚úÖ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
  }, 100);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â—ë –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è
  tabDiv.querySelector(".add-mod").addEventListener("click", () => {
    bfAddModuleRow(tabDiv, type);
    bfSyncAllTabs();
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
  tabDiv.querySelector(".delete-tab").addEventListener("click", () => {
    if (confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –≤–∫–ª–∞–¥–∫—É?")) {
      tabDiv.remove();
      bfHasUnsavedChanges = true;
      bfSyncAllTabs();
    }
  });

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  tabDiv.querySelector(".tab-label").addEventListener("input", () => bfHasUnsavedChanges = true);

  bfHasUnsavedChanges = true;
});


// === –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ ===
function bfSyncAllTabs() {
  const type = document.getElementById("bf-weapon-type").value;
  const modsWrap = bfModulesByType[type];
  if (!modsWrap) return;

  document.querySelectorAll("#bf-tabs-container .tab-block").forEach(tabDiv => {
    const modRows = tabDiv.querySelectorAll(".mod-row");
    const selectedGlobal = Array.from(document.querySelectorAll(".module-select")).map(s => s.value);

    modRows.forEach(row => {
      const catSel = row.querySelector(".category-select");
      const modSel = row.querySelector(".module-select");
      const cat = catSel.value;
      const list = modsWrap.byCategory[cat] || [];
      const currentValue = modSel.value;

      modSel.innerHTML = "";

      list.forEach(m => {
        if (selectedGlobal.includes(m.en) && m.en !== currentValue) return;
        const opt = document.createElement("option");
        opt.value = m.en;
        opt.textContent = m.en;
        modSel.appendChild(opt);
      });

      if ([...modSel.options].some(o => o.value === currentValue)) {
        modSel.value = currentValue;
      } else if (modSel.options.length) {
        modSel.value = modSel.options[0].value;
      }
    });
  });
}


// === –ü—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è ===
document.getElementById("bf-weapon-type")?.addEventListener("change", async (e) => {
  const type = e.target.value;
  if (!type) return;

  // –°–±—Ä–æ—Å –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
  document.getElementById("bf-tabs-container").innerHTML = "";

  await bfLoadModules(type);
  console.log("‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", type);
});


function bfAddModuleRow(tabDiv, type) {
  const modsWrap = bfModulesByType[type];
  if (!modsWrap) return alert("Select weapon type first");

  const row = document.createElement('div');
  row.className = 'mod-row';

  const categorySelect = document.createElement('select');
  categorySelect.className = 'form-input category-select';

  const moduleSelect = document.createElement('select');
  moduleSelect.className = 'form-input module-select';

   // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç –≤–æ –≤–∫–ª–∞–¥–∫–µ
   const usedCategories = Array.from(tabDiv.querySelectorAll('.category-select')).map(s => s.value);
   const availableCategories = Object.keys(modsWrap.byCategory).filter(cat => !usedCategories.includes(cat));
   
   if (availableCategories.length === 0) {
     alert("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ");
     return;
   }
   
   availableCategories.forEach(cat => {
     const opt = document.createElement('option');
     opt.value = cat;
     opt.textContent = cat;
     categorySelect.appendChild(opt);
   });


  row.appendChild(categorySelect);
  row.appendChild(moduleSelect);
  tabDiv.querySelector('.mod-selects').appendChild(row);

  function refreshModuleOptions() {
    const cat = categorySelect.value;
    const list = modsWrap.byCategory[cat] || [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ
    const selected = Array.from(tabDiv.querySelectorAll('.module-select')).map(s => s.value);

    const currentValue = moduleSelect.value;
    moduleSelect.innerHTML = '';

    list.forEach(m => {
      // –ú–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏: –æ–Ω —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ò–õ–ò –Ω–µ –≤—ã–±—Ä–∞–Ω –≤ –¥—Ä—É–≥–∏—Ö —Å–µ–ª–µ–∫—Ç–∞—Ö
      if (selected.includes(m.en) && m.en !== currentValue) return;
      
      const opt = document.createElement('option');
      opt.value = m.en;
      opt.textContent = m.en;
      moduleSelect.appendChild(opt);
    });

    if (!moduleSelect.value && moduleSelect.options.length) {
      moduleSelect.value = moduleSelect.options[0].value;
    }
  }

  function syncAllModuleSelects() {
    // –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ
    const selected = Array.from(tabDiv.querySelectorAll('.module-select')).map(s => s.value);

    tabDiv.querySelectorAll('.mod-row').forEach(r => {
      const catSel = r.querySelector('.category-select');
      const modSel = r.querySelector('.module-select');
      const cat = catSel.value;
      const list = modsWrap.byCategory[cat] || [];
      const currentValue = modSel.value;

      modSel.innerHTML = '';
      
      list.forEach(m => {
        // –¢–æ—Ç –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø: —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ò–õ–ò –Ω–µ –≤—ã–±—Ä–∞–Ω –≤ –¥—Ä—É–≥–∏—Ö
        if (selected.includes(m.en) && m.en !== currentValue) return;
        
        const opt = document.createElement('option');
        opt.value = m.en;
        opt.textContent = m.en;
        modSel.appendChild(opt);
      });

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
      if ([...modSel.options].some(o => o.value === currentValue)) {
        modSel.value = currentValue;
      } else if (modSel.options.length) {
        modSel.value = modSel.options[0].value;
      }
    });
  }

  categorySelect.addEventListener('change', () => { 
    refreshModuleOptions(); 
    syncAllModuleSelects(); 
  });
  
  moduleSelect.addEventListener('change', syncAllModuleSelects);

  // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  refreshModuleOptions();
  syncAllModuleSelects();
}

/* ===============================
   üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ë–û–†–ö–ò
   =============================== */
document.getElementById("bf-submit-build")?.addEventListener("click", bfHandleSubmitBuild);

async function bfHandleSubmitBuild() {
  const title = document.getElementById("bf-title").value.trim();
  const weapon_type = document.getElementById("bf-weapon-type").value;
  const date = document.getElementById("bf-build-date").value;
  const top1 = document.getElementById("bf-top1").value.trim();
  const top2 = document.getElementById("bf-top2").value.trim();
  const top3 = document.getElementById("bf-top3").value.trim();

  // –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const selectedCategories = Array.from(document.querySelectorAll(".bf-build-category:checked")).map(
    (cb) => cb.value
  );

  const tabs = Array.from(document.querySelectorAll("#bf-tabs-container .tab-block")).map((tab) => {
    const label = tab.querySelector(".tab-label").value.trim();
    const items = Array.from(tab.querySelectorAll(".module-select")).map((s) => s.value);
    return { label, items };
  });

  const data = {
    initData: tg.initData,
    title,
    weapon_type,
    date,
    top1,
    top2,
    top3,
    tabs,
    categories: selectedCategories,
  };

  const method = bfCurrentEditId ? "PUT" : "POST";
  const url = bfCurrentEditId ? `/api/bf/builds/${bfCurrentEditId}` : "/api/bf/builds";

  try {
    const res = await fetch(url, {
      method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    });

    if (!res.ok) {
      const err = await res.text();
      throw new Error(err);
    }

    alert(bfCurrentEditId ? "–°–±–æ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" : "–°–±–æ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    bfHasUnsavedChanges = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    bfShowScreen("screen-bf-edit-builds");
    await bfLoadBuildsTable();
    bfCurrentEditId = null;
  } catch (e) {
    console.error("Save build error:", e);
    alert("Error saving build");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞ —Ñ–æ—Ä–º–µ
document.getElementById("bf-back-from-form")?.addEventListener("click", () => {
  if (bfHasUnsavedChanges) {
    if (!confirm("–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è?")) {
      return;
    }
  }
  bfHasUnsavedChanges = false;
  bfShowScreen("screen-battlefield-main");
});

/* ===============================
   üì• –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–ë–û–†–ö–ò
   =============================== */
async function bfEditBuild(build) {
  bfCurrentEditId = build.id;
  bfShowScreen("screen-bf-form");
  document.getElementById("bf-submit-build").textContent = "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º";

  document.getElementById("bf-title").value = build.title || "";
  document.getElementById("bf-weapon-type").value = build.weapon_type || "";
  document.getElementById("bf-top1").value = build.top1 || "";
  document.getElementById("bf-top2").value = build.top2 || "";
  document.getElementById("bf-top3").value = build.top3 || "";
  document.getElementById("bf-build-date").value = build.date || new Date().toISOString().split("T")[0];

  const container = document.getElementById("bf-tabs-container");
  container.innerHTML = "";

  await bfLoadModules(build.weapon_type);

   // ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥–∞–ª–æ—á–∫–∏)
   document.querySelectorAll(".bf-build-category").forEach(cb => {
     cb.checked = Array.isArray(build.categories)
       ? build.categories.includes(cb.value)
       : false;
   });

  if (Array.isArray(build.tabs)) {
    build.tabs.forEach((tab) => {
      const tabDiv = document.createElement("div");
      tabDiv.className = "tab-block";
      tabDiv.innerHTML = `
        <input type="text" class="tab-label" value="${tab.label}" style="margin-bottom: 10px;">
        <div class="mod-selects"></div>
        <div class="tab-actions">
          <button type="button" class="btn add-mod">+ –ú–æ–¥—É–ª—å</button>
          <button type="button" class="btn delete-tab">üóë –£–¥–∞–ª–∏—Ç—å</button>
        </div>
      `;
      container.appendChild(tabDiv);

      tabDiv.querySelector(".add-mod").addEventListener("click", () =>
        bfAddModuleRow(tabDiv, build.weapon_type)
      );
      tabDiv.querySelector(".delete-tab").addEventListener("click", () => tabDiv.remove());

      tab.items.forEach((modKey) => {
        const modsWrap = bfModulesByType[build.weapon_type];
        const found = Object.entries(modsWrap.byCategory).find(([cat, list]) =>
          list.some((m) => m.en === modKey)
        );
        if (found) {
          const [cat] = found;
          const row = document.createElement("div");
          row.className = "mod-row";

          const catSel = document.createElement("select");
          catSel.className = "form-input category-select";
          Object.keys(modsWrap.byCategory).forEach((c) => {
            const opt = document.createElement("option");
            opt.value = c;
            opt.textContent = c;
            if (c === cat) opt.selected = true;
            catSel.appendChild(opt);
          });

          const modSel = document.createElement("select");
          modSel.className = "form-input module-select";
          modsWrap.byCategory[cat].forEach((m) => {
            const opt = document.createElement("option");
            opt.value = m.en;
            opt.textContent = m.en;
            if (m.en === modKey) opt.selected = true;
            modSel.appendChild(opt);
          });

          row.appendChild(catSel);
          row.appendChild(modSel);
          tabDiv.querySelector(".mod-selects").appendChild(row);
        }
      });
    });
  }
}

/* ===============================
   üì¶ –ó–ê–ì–†–£–ó–ö–ê –ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–ë–û–†–û–ö
   =============================== */

// –ö–Ω–æ–ø–∫–∞ "–í—Å–µ —Å–±–æ—Ä–∫–∏"
document.getElementById("bf-show-builds-btn")?.addEventListener("click", async () => {
  bfShowScreen("screen-bf-builds");
  await bfLoadBuilds();
});

// –ö–Ω–æ–ø–∫–∞ "–ë–∞–∑–∞ —Å–±–æ—Ä–æ–∫" (–∞–¥–º–∏–Ω)
document.getElementById("bf-weapons-db-btn")?.addEventListener("click", async () => {
  bfShowScreen("screen-bf-edit-builds");
  await bfLoadBuildsTable();
});

// –ù–∞–∑–∞–¥ —Å–æ —Å–ø–∏—Å–∫–∞ —Å–±–æ—Ä–æ–∫
document.getElementById("bf-back-from-builds")?.addEventListener("click", () =>
  bfShowScreen("screen-battlefield-main")
);

// –ù–∞–∑–∞–¥ –∏–∑ –±–∞–∑—ã
document.getElementById("bf-back-from-edit")?.addEventListener("click", () =>
  bfShowScreen("screen-battlefield-main")
);

// === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–±–æ—Ä–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async function bfLoadBuilds() {
  try {
    const res = await fetch("/api/bf/builds");
    bfCachedBuilds = await res.json();
    await bfRenderBuilds(bfCachedBuilds);
  } catch (e) {
    console.error("BF load builds error:", e);
  }
}

// === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±–æ—Ä–æ–∫ (–∞–∫–∫–æ—Ä–¥–µ–æ–Ω) ===
// === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±–æ—Ä–æ–∫ (–∞–∫–∫–æ—Ä–¥–µ–æ–Ω –≤ —Å—Ç–∏–ª–µ Warzone) ===
async function bfRenderBuilds(builds) {
  const list = document.getElementById("bf-builds-list");
  const countEl = document.getElementById("bf-user-builds-count");
  const noResults = document.getElementById("bf-no-results-message");

  if (!list) return;
  list.innerHTML = "";
  
  countEl.textContent = `–í—Å–µ–≥–æ —Å–±–æ—Ä–æ–∫: ${ builds.length}`;
  noResults.style.display = builds.length ? "none" : "block";

  if (!Array.isArray(builds) || builds.length === 0) {
    list.innerHTML = '<p class="no-results">üîç –°–±–æ—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
    return;
  }
     // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—Ä—É–∂–∏—è (–æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
   const uniqueTypes = [...new Set(builds.map(b => b.weapon_type))];
   await Promise.all(uniqueTypes.map(t => bfLoadModules(t)));

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∫–∞–∫ –≤ Warzone
  function prioritySort(a, b) {
    const normalizeCats = (cats = []) => cats.map(c => {
      switch (c.toLowerCase()) {
        case 'new': return '–ù–æ–≤–∏–Ω–∫–∏';
        case 'popular': return '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ';
        case 'meta': return '–ú–µ—Ç–∞';
        case 'topmeta': return '–¢–æ–ø –º–µ—Ç–∞';
        default: return c;
      }
    });

    const A = normalizeCats(a.categories || []);
    const B = normalizeCats(b.categories || []);

    const getPriority = (cats) => {
      if (cats.includes("–ù–æ–≤–∏–Ω–∫–∏")) return 1;
      if (cats.includes("–¢–æ–ø –º–µ—Ç–∞")) return 2;
      if (cats.includes("–ú–µ—Ç–∞")) return 3;
      return 4;
    };

    const pa = getPriority(A);
    const pb = getPriority(B);

    if (pa !== pb) return pa - pb;

    const getTime = (build) => {
      let t = build.created_at ? Date.parse(build.created_at) : NaN;
      if (Number.isNaN(t)) {
        const [dd, mm, yyyy] = String(build.date || '').split('.');
        if (dd && mm && yyyy) {
          t = new Date(Number(yyyy), Number(mm) - 1, Number(dd)).getTime();
        }
      }
      return t || 0;
    };

    const ta = getTime(a);
    const tb = getTime(b);
    return tb - ta;
  }

  const sorted = [...builds].sort(prioritySort);
  bfCachedBuilds = sorted;

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const groups = {
    "–ù–æ–≤–∏–Ω–∫–∏": [],
    "–¢–æ–ø –º–µ—Ç–∞": [],
    "–ú–µ—Ç–∞": [],
    "–û—Å—Ç–∞–ª—å–Ω–æ–µ": []
  };
  
  sorted.forEach(b => {
    const cats = (b.categories || []).map(c => c.toLowerCase());
    if (cats.includes("new") || cats.includes("–Ω–æ–≤–∏–Ω–∫–∏")) groups["–ù–æ–≤–∏–Ω–∫–∏"].push(b);
    else if (cats.includes("topmeta") || cats.includes("—Ç–æ–ø –º–µ—Ç–∞")) groups["–¢–æ–ø –º–µ—Ç–∞"].push(b);
    else if (cats.includes("meta") || cats.includes("–º–µ—Ç–∞")) groups["–ú–µ—Ç–∞"].push(b);
    else groups["–û—Å—Ç–∞–ª—å–Ω–æ–µ"].push(b);
  });
  
  const order = ["–ù–æ–≤–∏–Ω–∫–∏", "–¢–æ–ø –º–µ—Ç–∞", "–ú–µ—Ç–∞", "–û—Å—Ç–∞–ª—å–Ω–æ–µ"];
  
  // === –†–µ–Ω–¥–µ—Ä —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ ===
  order.forEach((groupName, groupIndex) => {
    const buildsInGroup = groups[groupName];
    if (buildsInGroup.length === 0) return;
  
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–æ–π)
    if (groupIndex > 0) {
      const divider = document.createElement('div');
      divider.className = 'bf-category-divider';
      list.appendChild(divider);
    }
  
    // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–±–æ—Ä–æ–∫
    buildsInGroup.forEach((build, buildIndex) => {
      const wrapper = document.createElement('div');
      wrapper.className = 'bf-loadout js-loadout';

      const weaponTypeRu = bfWeaponTypeLabels[build.weapon_type] || build.weapon_type;

      // üî• –¶–≤–µ—Ç–∞ —Ç–æ–ø-–º–æ–¥—É–ª–µ–π –∫–∞–∫ –≤ Warzone
      const pickTopBg = (text) => {
        const m = String(text).trim().match(/^#?(\d+)/);
        const n = m ? parseInt(m[1], 10) : 0;
        if (n === 1) return '#b8a326'; // –∑–æ–ª–æ—Ç–æ–π
        if (n === 2) return '#B0B0B0'; // —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π
        if (n === 3) return '#FF8C00'; // –±—Ä–æ–Ω–∑–æ–≤—ã–π
        return '#2f3336'; // —Å–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      };

      const tops = [build.top1, build.top2, build.top3]
        .filter(Boolean)
        .map(mod => {
          const text = mod.trim();
          const bg = pickTopBg(text);
          return `<span class="bf-top" style="background:${bg}">${text}</span>`;
        })
        .join('');

      const cats = Array.isArray(build.categories) ? build.categories : [];
      
      // üé® –¶–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞–∫ –≤ Warzone (–æ–¥–∏–Ω –≤ –æ–¥–∏–Ω)
      const categoryBadges = cats.map(cat => {
        const categoryName = String(cat).toLowerCase();
        let bg = '#2a2f36';   // —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let text = '#fff';    // —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        let label = '';
      
        switch (categoryName) {
          case 'new':
          case '–Ω–æ–≤–∏–Ω–∫–∞':
          case '–Ω–æ–≤–∏–Ω–∫–∏':
            bg = 'linear-gradient(135deg, #ff4e50, #f9d423)'; // –∫—Ä–∞—Å–Ω–æ-–∂—ë–ª—Ç—ã–π
            text = '#fff';
            label = '–ù–æ–≤–∏–Ω–∫–∞';
            break;
          case 'topmeta':
          case '—Ç–æ–ø –º–µ—Ç–∞':
            bg = 'linear-gradient(135deg, #ffb347, #ffcc33)'; // –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π
            text = '#222';
            label = '–¢–æ–ø –º–µ—Ç–∞';
            break;
          case 'meta':
          case '–º–µ—Ç–∞':
            bg = 'linear-gradient(135deg, #56ab2f, #a8e063)'; // –∑–µ–ª—ë–Ω—ã–π
            text = '#fff';
            label = '–ú–µ—Ç–∞';
            break;
          case 'popular':
          case '–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ':
            bg = 'linear-gradient(135deg, #36d1dc, #5b86e5)'; // –≥–æ–ª—É–±–æ–π
            text = '#fff';
            label = '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ';
            break;
          default:
            bg = 'linear-gradient(135deg, #232a33, #1b1f25)'; // —Å–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            text = '#ccc';
            label = cat;
        }
      
        return `
          <span class="bf-badge" style="
            background: ${bg};
            color: ${text};
            font-weight: 500;
            border-radius: 6px;
            padding: 3px 10px;
            font-size: 0.8rem;
            margin-right: 4px;
            display: inline-block;
            text-shadow: 0 1px 1px rgba(0,0,0,0.4);
          ">
            ${label}
          </span>
        `;
      }).join('');


      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª–∞–¥–æ–∫
      let tabs = [];
      try {
        tabs = typeof build.tabs === "string" ? JSON.parse(build.tabs) : (build.tabs || []);
      } catch {
        tabs = [];
      }

      // üî• –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ DD.MM.YYYY
      const formatDate = (dateStr) => {
        if (!dateStr) return '';
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        if (dateStr.includes('.')) return dateStr;
        
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        if (dateStr.includes('-')) {
          const [year, month, day] = dateStr.split('-');
          return `${day}.${month}.${year}`;
        }
        
        return dateStr;
      };

      // –í–∫–ª–∞–¥–∫–∏
      const tabBtns = tabs.map((tab, i) =>
        `<button class="bf-tab-btn ${i === 0 ? 'is-active' : ''}" data-tab="bf-${groupIndex}-${buildIndex}-${i}">
           ${tab.label || "–í–∫–ª–∞–¥–∫–∞"}
         </button>`
      ).join('');
      
      const tabContents = tabs.map((tab, i) => `
        <div class="bf-tab-content ${i === 0 ? 'is-active' : ''}" data-tab-content="bf-${groupIndex}-${buildIndex}-${i}">
          <div class="bf-modules">
            ${(tab.items || []).map(itemKey => {
               const modsWrap = bfModulesByType[build.weapon_type];
               const modKey = String(itemKey).toLowerCase().trim();
               const mod = modsWrap?.flat?.find(m => m.en.toLowerCase() === modKey);
               const slot = mod?.category || "‚Äî";
               const name = mod?.en || itemKey;
              return `
                <div class="bf-module">
                  <span class="bf-module-slot">${slot}</span>
                  <span class="bf-module-name">${name}</span>
                </div>
              `;
            }).join('')}
          </div>
        </div>
      `).join('');

      
      wrapper.innerHTML = `
        <div class="bf-loadout__header js-loadout-toggle">
          <div class="bf-loadout__header-top">
            <button class="bf-toggle-icon" type="button"><i class="fa-solid fa-chevron-down"></i></button>
            <h3 class="bf-loadout__title">${build.title}</h3>
            <span class="bf-loadout__date">${formatDate(build.date)}</span>
          </div>
          <div class="bf-loadout__meta">
            <div class="bf-tops">${tops}</div>
            <div class="bf-categories">${categoryBadges}</div>
            <div class="bf-type" style="
              background: rgba(58,123,213,0.15);
              border: 1px solid rgba(58,123,213,0.3);
              padding: 3px 10px;
              border-radius: 8px;
              font-size: 0.85rem;
              color: #9cc9ff;
              text-transform: capitalize;
            ">
              ${weaponTypeRu}
            </div>

          </div>
        </div>
        <div class="bf-loadout__content" style="max-height: 0; overflow: hidden;">
          <div class="bf-loadout__inner">
            <div class="bf-tabs">
              <div class="bf-tab-buttons">${tabBtns}</div>
              <div class="bf-tab-contents">${tabContents}</div>
            </div>
          </div>
        </div>
      `;

      list.appendChild(wrapper);
    });
  });

  // –°–±—Ä–æ—Å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
  document.querySelectorAll('.js-loadout').forEach(el => {
    el.classList.remove('is-open');
    const content = el.querySelector('.bf-loadout__content');
    if (content) content.style.maxHeight = '0';
  });

  // === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ ===
  document.querySelectorAll('.bf-tab-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      const parent = button.closest('.bf-loadout');
      const tab = button.dataset.tab;

      parent.querySelectorAll('.bf-tab-btn').forEach(b => b.classList.remove('is-active'));
      parent.querySelectorAll('.bf-tab-content').forEach(c => c.classList.remove('is-active'));
      button.classList.add('is-active');
      parent.querySelector(`[data-tab-content="${tab}"]`)?.classList.add('is-active');

      const content = parent.querySelector('.bf-loadout__content');
      content.style.maxHeight = content.scrollHeight + 'px';
    });
  });

  // === –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–±–æ—Ä–∫–∏ (–∞–∫–∫–æ—Ä–¥–µ–æ–Ω) ===
  document.querySelectorAll('.js-loadout-toggle').forEach(header => {
    header.addEventListener('click', () => {
      const loadout = header.closest('.js-loadout');
      const content = loadout.querySelector('.bf-loadout__content');
      loadout.classList.toggle('is-open');
      content.style.maxHeight = loadout.classList.contains('is-open') ? content.scrollHeight + 'px' : '0';
    });
  });
}

/* ===============================
   üß© –§–ò–õ–¨–¢–†–´ –ò –ü–û–ò–°–ö
   =============================== */
document.getElementById("bf-category-filter")?.addEventListener("change", () => {
  bfFilterBuilds();
});

document.getElementById("bf-weapon-filter")?.addEventListener("change", () => {
  bfFilterBuilds();
});

document.getElementById("bf-builds-search")?.addEventListener("input", () => {
  bfFilterBuilds();
});

function bfFilterBuilds() {
  const cat = document.getElementById("bf-category-filter").value;
  const type = document.getElementById("bf-weapon-filter").value;
  const q = document.getElementById("bf-builds-search").value.toLowerCase();

  let filtered = bfCachedBuilds;

  if (cat !== "all") {
    filtered = filtered.filter((b) => (b.categories || []).includes(cat));
  }

  if (type !== "all") {
    filtered = filtered.filter((b) => b.weapon_type === type);
  }

  if (q) {
    filtered = filtered.filter((b) => {
      const text =
        (b.title || "") +
        (b.top1 || "") +
        (b.top2 || "") +
        (b.top3 || "") +
        JSON.stringify(b.tabs || []);
      return text.toLowerCase().includes(q);
    });
  }

  bfRenderBuilds(filtered);
}

/* ===============================
   üì¶ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ë–ê–ó–´ –°–ë–û–†–û–ö
   =============================== */

/* ===============================
   üì¶ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ë–ê–ó–´ –°–ë–û–†–û–ö
   =============================== */

async function bfLoadBuildsTable() {
  try {
    const res = await fetch("/api/bf/builds");
    const builds = await res.json();
    const grid = document.getElementById("bf-edit-builds-grid");
    const countEl = document.getElementById("bf-builds-count");

    grid.innerHTML = "";
    countEl.textContent = `–í—Å–µ–≥–æ: ${builds.length} —Å–±–æ—Ä–æ–∫`;

    if (!builds.length) {
      grid.innerHTML = `<p style="text-align:center;opacity:0.7;color:#8fa3bf;padding:40px;">–°–±–æ—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</p>`;
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –æ—Ä—É–∂–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    await bfLoadWeaponTypesForFilter();

    builds.forEach((b) => {
      const weaponLabel = bfWeaponTypeLabels[b.weapon_type] || b.weapon_type;

      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–ª–∞—Å—Å–∞–º–∏ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
      const cats = Array.isArray(b.categories)
        ? b.categories
            .map((c) => {
              const cat = String(c).toLowerCase();
              let className = 'bf-cat';
              let label = c;

              if (["–Ω–æ–≤–∏–Ω–∫–∏", "new"].includes(cat)) {
                className += ' bf-cat-new';
                label = "–ù–æ–≤–∏–Ω–∫–∏";
              } else if (["—Ç–æ–ø –º–µ—Ç–∞", "topmeta"].includes(cat)) {
                className += ' bf-cat-topmeta';
                label = "–¢–æ–ø –ú–µ—Ç–∞";
              } else if (["–º–µ—Ç–∞", "meta"].includes(cat)) {
                className += ' bf-cat-meta';
                label = "–ú–µ—Ç–∞";
              } else if (["–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ", "popular"].includes(cat)) {
                className += ' bf-cat-popular';
                label = "–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ";
              } else if (["–Ω–æ–≤–∏—á–∫–∏", "beginner"].includes(cat)) {
                className += ' bf-cat-beginner';
                label = "–ù–æ–≤–∏—á–∫–∏";
              } else {
                className += ' bf-cat-default';
              }

              return `<span class="${className}">${label}</span>`;
            })
            .join("")
        : "";

      // –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
      const formatDate = (dateStr) => {
        if (!dateStr) return '';
        if (dateStr.includes('.')) return dateStr;
        if (dateStr.includes('-')) {
          const [year, month, day] = dateStr.split('-');
          return `${day}.${month}.${year}`;
        }
        return dateStr;
      };

      const date = formatDate(b.date);

      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫–ª–∞–¥–æ–∫
      let tabsCount = 0;
      try {
        const tabs = typeof b.tabs === "string" ? JSON.parse(b.tabs) : (b.tabs || []);
        tabsCount = tabs.length;
      } catch {
        tabsCount = 0;
      }

      const card = document.createElement("div");
      card.className = "bf-build-card";
      card.setAttribute('data-weapon-type', b.weapon_type);
      card.setAttribute('data-categories', Array.isArray(b.categories) ? b.categories.join(',') : '');
      card.setAttribute('data-title', b.title.toLowerCase());
      
      card.innerHTML = `
        <div class="bf-card-header">
          <h3>${b.title}</h3>
        </div>
        
        <div class="bf-card-meta">
          <span class="bf-meta-item">${date}</span>
          <span class="bf-meta-item">‚Ä¢</span>
          <span class="bf-meta-item">${tabsCount} –≤–∫–ª–∞–¥.</span>
        </div>
        
        <div class="bf-categories">
          ${cats}
        </div>
        
        <div class="bf-weapon-type">
          ${weaponLabel}
        </div>
        
        <div class="bf-card-footer">
          <button class="btn btn-edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úè</button>
          <button class="btn btn-delete" title="–£–¥–∞–ª–∏—Ç—å">üóë</button>
        </div>
      `;

      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      card.querySelector(".btn-edit").addEventListener("click", (e) => {
        e.stopPropagation();
        bfEditBuild(b);
      });

      // –£–¥–∞–ª–µ–Ω–∏–µ
      card.querySelector(".btn-delete").addEventListener("click", async (e) => {
        e.stopPropagation();
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä–∫—É "${b.title}"?`)) return;
        try {
          await fetch(`/api/bf/builds/${b.id}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ initData: tg.initData }),
          });
          await bfLoadBuildsTable();
        } catch (error) {
          console.error("Delete build error:", error);
          alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏");
        }
      });

      grid.appendChild(card);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    bfInitEditBuildsFilters();

  } catch (e) {
    console.error("BF builds table load error:", e);
    const grid = document.getElementById("bf-edit-builds-grid");
    grid.innerHTML = `<p style="text-align:center;color:#dc3545;padding:40px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–±–æ—Ä–æ–∫</p>`;
  }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

/* ===============================
   üéØ –§–ò–õ–¨–¢–†–´ –î–õ–Ø –ë–ê–ó–´ –°–ë–û–†–û–ö
   =============================== */

async function bfLoadWeaponTypesForFilter() {
  try {
    const res = await fetch("/data/types-bf.json");
    const types = await res.json();
    const select = document.getElementById("bf-edit-type-filter");
    if (!select) return;

    // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    select.innerHTML = '<option value="all">–í—Å–µ</option>';
    types.forEach((t) => {
      const opt = document.createElement("option");
      opt.value = t.key;
      opt.textContent = t.label;
      select.appendChild(opt);
    });
  } catch (err) {
    console.error("Failed to load weapon types for filter:", err);
  }
}

function bfInitEditBuildsFilters() {
  const typeFilter = document.getElementById('bf-edit-type-filter');
  const categoryFilter = document.getElementById('bf-edit-category-filter');
  const searchInput = document.getElementById('bf-edit-search');
  
  if (typeFilter) {
    typeFilter.addEventListener('change', bfFilterEditBuilds);
  }
  if (categoryFilter) {
    categoryFilter.addEventListener('change', bfFilterEditBuilds);
  }
  if (searchInput) {
    searchInput.addEventListener('input', bfFilterEditBuilds);
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  setTimeout(bfFilterEditBuilds, 100);
}

function bfFilterEditBuilds() {
  const typeFilter = document.getElementById('bf-edit-type-filter')?.value || 'all';
  const categoryFilter = document.getElementById('bf-edit-category-filter')?.value || 'all';
  const searchQuery = document.getElementById('bf-edit-search')?.value.toLowerCase() || '';
  
  const cards = document.querySelectorAll('.bf-build-card');
  let visibleCount = 0;
  
  cards.forEach(card => {
    const weaponType = card.getAttribute('data-weapon-type') || '';
    const categories = card.getAttribute('data-categories') || '';
    const title = card.getAttribute('data-title') || '';
    
    const typeMatch = typeFilter === 'all' || weaponType === typeFilter;
    const categoryMatch = categoryFilter === 'all' || categories.includes(categoryFilter);
    const searchMatch = searchQuery === '' || title.includes(searchQuery);
    
    const isVisible = typeMatch && categoryMatch && searchMatch;
    card.style.display = isVisible ? 'block' : 'none';
    
    if (isVisible) visibleCount++;
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
  const countEl = document.getElementById('bf-builds-count');
  if (countEl) {
    countEl.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ: ${visibleCount} –∏–∑ ${cards.length} —Å–±–æ—Ä–æ–∫`;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", () => {
  // –£–∂–µ –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
});
/* ===============================
   üé® –¢–ï–ú–ê
   =============================== */
(function bfApplyTheme() {
  const root = document.documentElement;
  root.style.setProperty("--bf-bg", "#101821");
  root.style.setProperty("--bf-card", "#15202c");
  root.style.setProperty("--bf-text", "#e0e6ee");
  root.style.setProperty("--bf-accent", "#3a7bd5");
})();

/* ===============================
   ‚úÖ –ì–û–¢–û–í–û
   =============================== */
console.log("‚úÖ Battlefield builds module initialized");
