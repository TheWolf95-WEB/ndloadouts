import os
import sqlite3
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, CallbackQuery, TelegramObject
)
from aiogram import BaseMiddleware, Router
from typing import Callable, Awaitable, Dict, Any
from database import save_user, init_db, add_news

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
load_dotenv("/opt/ndloadouts/.env")
BOT_TOKEN = os.getenv("TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", -1001990222164))
DB_PATH = "/opt/ndloadouts_storage/builds.db"

if not BOT_TOKEN or not WEBAPP_URL:
    raise ValueError("‚ùå BOT_TOKEN –∏ WEBAPP_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# --- Middleware: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–∫—É ---
class PrivateOnlyMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable, event: TelegramObject, data: Dict[str, Any]) -> Any:
        chat = getattr(event, 'chat', None) or getattr(getattr(event, 'message', None), 'chat', None)
        if chat and chat.type != "private":
            return
        return await handler(event, data)

dp.message.middleware(PrivateOnlyMiddleware())
dp.callback_query.middleware(PrivateOnlyMiddleware())
dp.include_router(router)

# --- –•–µ–ª–ø–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception as e:
        print(f"[TG ERROR] get_chat_member: {e}")
        return False

# --- –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞ ---
async def grant_access(callback: CallbackQuery):
    name = callback.from_user.first_name or "–±–æ–µ—Ü"
    text = (
        "‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –±–æ–µ—Ü.\n"
        "ü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NDHQ.\n\n"
        "üì° –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
        "üì∞ –°–≤–µ–∂–∏–µ –∏–≥—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üõ† –ú–µ—Ç–∞-—Å–±–æ—Ä–∫–∏ –∏ –∞—Ä—Å–µ–Ω–∞–ª\n"
        "üìñ –ì–∞–π–¥—ã –∏ —Ä–∞–∑–±–æ—Ä—ã\n"
        "üéØ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
        "–°–æ–±–ª—é–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª. –£–¥–∞—á–∏ –≤ –±–æ—é!"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å–±–æ—Ä–∫–∏", web_app=WebAppInfo(url=WEBAPP_URL)),
        InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")
    ]])
    await callback.message.edit_text(text, reply_markup=keyboard)

# --- /start ---
@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = int(message.from_user.id)
    subscribed = await is_subscribed(user_id)

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("INSERT OR IGNORE INTO users(id, first_name, username, verified) VALUES(?, ?, ?, 0)",
                        (str(user_id), message.from_user.first_name or "", message.from_user.username or ""))
            cur.execute("UPDATE users SET verified = ? WHERE id = ?", (1 if subscribed else 0, str(user_id)))
            conn.commit()
    except Exception as e:
        print(f"[DB ERROR] {e}")

    if subscribed:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å–±–æ—Ä–∫–∏", web_app=WebAppInfo(url=WEBAPP_URL)),
            InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")
        ]])
        await message.answer("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\nü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NDHQ.", reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/callofdutynd"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="recheck_sub")
        ]])
        await message.answer(
            "ü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –±–æ–µ—Ü!\n\n"
            "üîê –¢—ã –Ω–∞ NDHQ ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤.\n"
            "üì° –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ª–∏—á–Ω–æ—Å—Ç—å: –≤—Å—Ç—É–ø–∏ –≤ —à—Ç–∞–± –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.",
            reply_markup=keyboard
        )

# --- –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@router.callback_query(F.data == "recheck_sub")
async def recheck_subscription(callback: CallbackQuery):
    user_id = int(callback.from_user.id)

    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É‚Ä¶")
    except:
        pass

    subscribed = await is_subscribed(user_id)
    print(f"[DEBUG] user_id={user_id} | subscribed={subscribed}")

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("UPDATE users SET verified = ? WHERE id = ?", (1 if subscribed else 0, str(user_id)))
            conn.commit()
    except Exception as e:
        print(f"[DB ERROR] {e}")

    if subscribed:
        try:
            save_user(str(user_id), callback.from_user.first_name or "", callback.from_user.username or "")
        except Exception as e:
            print(f"[DB ERROR] save_user: {e}")

        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")  # <- –¥–æ–±–∞–≤–∏–ª–∏
        await grant_access(callback)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/callofdutynd")],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="recheck_sub")],
            [InlineKeyboardButton(text="üßë‚Äç‚úàÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")]
        ])
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –î–æ—Å—Ç—É–ø –∫ NDHQ –∑–∞–ø—Ä–µ—â—ë–Ω.\n"
            "üì° –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É.",
            reply_markup=keyboard
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ ---
@router.channel_post()
async def on_channel_post(message: Message):
    try:
        if message.chat.id != CHANNEL_ID:
            return

        text = message.text or message.caption or ""
        if "#–Ω–æ–≤–æ—Å—Ç–∏" not in text.lower():
            return

        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM news WHERE content LIKE ?", (f"%{message.message_id}%",))
            if cur.fetchone()[0] > 0:
                print("[SKIP] –£–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
                return

        title = text.strip().split('\n')[0]
        image_url = None
        if message.photo:
            largest = message.photo[-1]
            file = await bot.get_file(largest.file_id)
            image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

        def detect_category(text: str) -> str:
            text = text.lower()
            rules = {
                "call-of-duty": ["#callofduty", "#blackops", "#bo7", "#warzone", "#cod", "#mw3"],
                "battlefield": ["#battlefield", "#bf6", "#bf2042"],
                "cs2": ["#cs2", "#counterstrike"],
                "apex": ["#apex", "#apexlegends"]
            }
            for cat, tags in rules.items():
                if any(tag in text for tag in tags):
                    return cat
            return "general"

        category = detect_category(text)
        date_str = message.date.strftime("%d.%m.%Y %H:%M")

        add_news({
            "title": title,
            "content": text.strip(),
            "image": image_url,
            "date": date_str,
            "category": category
        })

        print(f"[OK] –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {title}")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
