import os
import sqlite3
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, CallbackQuery, TelegramObject
)
from aiogram import BaseMiddleware, Router
from aiogram.exceptions import TelegramBadRequest
from typing import Callable, Awaitable, Dict, Any
from database import save_user, init_db

# --- env ---
load_dotenv("/opt/ndloadouts/.env")
BOT_TOKEN = os.getenv("TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1001990222164"))  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å
DB_PATH = "/opt/ndloadouts_storage/builds.db"

if not BOT_TOKEN or not WEBAPP_URL:
    raise ValueError("‚ùå BOT_TOKEN –∏ WEBAPP_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

# --- bot ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# --- middleware: —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã ---
class PrivateOnlyMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable, event: TelegramObject, data: Dict[str, Any]) -> Any:
        chat = getattr(event, 'chat', None) or getattr(getattr(event, 'message', None), 'chat', None)
        if chat and chat.type != "private":
            return
        return await handler(event, data)

dp.message.middleware(PrivateOnlyMiddleware())
dp.callback_query.middleware(PrivateOnlyMiddleware())
dp.include_router(router)

# --- –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ ---
async def safe_edit(orig_message: Message, text: str, reply_markup: InlineKeyboardMarkup | None = None):
    try:
        await orig_message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await orig_message.answer(text, reply_markup=reply_markup)
        else:
            print(f"[TG ERROR] edit_text failed: {e}")
            await orig_message.answer(text, reply_markup=reply_markup)

# --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        status = member.status
        ok = status in ("member", "administrator", "creator")
        print(f"[DEBUG] get_chat_member | user_id={user_id} | status={status} | subscribed={ok}")
        return ok
    except Exception as e:
        msg = str(e)
        print(f"[TG ERROR] get_chat_member: {msg}")
        if "CHAT_ADMIN_REQUIRED" in msg or "not enough rights" in msg.lower():
            print("[HINT] –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞ @callofdutynd.")
        return False

# --- –∫–æ–º–∞–Ω–¥–∞ /me (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ---
@router.message(F.text == "/me")
async def whoami(message: Message):
    member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)
    await message.answer(f"–¢—ã: {message.from_user.id}\n–°—Ç–∞—Ç—É—Å: {member.status}")

# --- –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω ---
async def grant_access(callback: CallbackQuery):
    text = (
        "‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –±–æ–µ—Ü.\n"
        "ü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NDHQ.\n\n"
        "üì° –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
        "üõ† –ú–µ—Ç–∞-—Å–±–æ—Ä–∫–∏ –∏ –∞—Ä—Å–µ–Ω–∞–ª\n"
        "üìñ –ì–∞–π–¥—ã –∏ —Ä–∞–∑–±–æ—Ä—ã\n"
        "üéØ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
        "–°–æ–±–ª—é–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª. –£–¥–∞—á–∏ –≤ –±–æ—é!"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[ 
        InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL)),
        InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")
    ]])
    await safe_edit(callback.message, text, keyboard)

# --- —Å—Ç–∞—Ä—Ç /start ---
@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = int(message.from_user.id)
    subscribed = await is_subscribed(user_id)

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute(
                "INSERT OR IGNORE INTO users(id, first_name, username, verified) VALUES(?, ?, ?, 0)",
                (str(user_id), message.from_user.first_name or "", message.from_user.username or "")
            )
            cur.execute("UPDATE users SET verified = ? WHERE id = ?", (1 if subscribed else 0, str(user_id)))
            conn.commit()
    except Exception as e:
        print(f"[DB ERROR] {e}")

    if subscribed:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[ 
            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL)),
            InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")
        ]])
        await message.answer("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\nü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NDHQ.", reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[ 
            InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/callofdutynd"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="recheck_sub")
        ]])
        await message.answer(
            "ü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –±–æ–µ—Ü!\n\n"
            "üîê –¢—ã –Ω–∞ NDHQ ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤.\n"
            "üì° –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ª–∏—á–Ω–æ—Å—Ç—å: –≤—Å—Ç—É–ø–∏ –≤ —à—Ç–∞–± –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.",
            reply_markup=keyboard
        )

# --- –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
@router.callback_query(F.data == "recheck_sub")
async def recheck_subscription(callback: CallbackQuery):
    user_id = int(callback.from_user.id)
    try:
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É‚Ä¶")
    except Exception:
        pass

    subscribed = await is_subscribed(user_id)
    print(f"[DEBUG] recheck | user_id={user_id} | subscribed={subscribed}")

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("UPDATE users SET verified = ? WHERE id = ?", (1 if subscribed else 0, str(user_id)))
            conn.commit()
    except Exception as e:
        print(f"[DB ERROR] {e}")

    if subscribed:
        try:
            save_user(str(user_id), callback.from_user.first_name or "", callback.from_user.username or "")
        except Exception as e:
            print(f"[DB ERROR] save_user: {e}")
        try:
            await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        except Exception:
            pass
        await grant_access(callback)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/callofdutynd")],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="recheck_sub")],
            [InlineKeyboardButton(text="üßë‚Äç‚úàÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")]
        ])
        await safe_edit(
            callback.message,
            "‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –î–æ—Å—Ç—É–ø –∫ NDHQ –∑–∞–ø—Ä–µ—â—ë–Ω.\n"
            "üì° –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É.",
            keyboard
        )


@router.message(F.text == "/analytics")
async def analytics_cmd(message: Message):
    admin_ids = os.getenv("ADMIN_IDS", "").split(",")
    if str(message.from_user.id) not in admin_ids:
        await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", web_app=WebAppInfo(url="https://ndloadouts.ru/analytics"))]
    ])
    await message.answer("–í–æ—Ç —Ç–≤–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:", reply_markup=keyboard)


# --- –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶")
    init_db()
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("[INIT] Webhook —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ –±—ã–ª). –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling.")
    except Exception as e:
        print(f"[INIT] delete_webhook error: {e}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
