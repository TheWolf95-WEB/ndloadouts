import os
import asyncio
import sqlite3
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, CallbackQuery, TelegramObject
)
from aiogram import BaseMiddleware, Router
from typing import Callable, Awaitable, Dict, Any
from database import save_user, init_db

# --- Middleware: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–∫—É ---
class PrivateOnlyMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable,
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        chat = getattr(event, 'chat', None) or getattr(getattr(event, 'message', None), 'chat', None)
        if chat and chat.type != "private":
            return
        return await handler(event, data)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv("/opt/ndloadouts/.env")
BOT_TOKEN = os.getenv("TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
CHANNEL_ID = -1001990222164 
DB_PATH = "/opt/ndloadouts_storage/builds.db"

if not BOT_TOKEN or not WEBAPP_URL:
    raise ValueError("‚ùå BOT_TOKEN –∏ WEBAPP_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

dp.message.middleware(PrivateOnlyMiddleware())
dp.callback_query.middleware(PrivateOnlyMiddleware())
dp.include_router(router)

# --- –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞ ---
async def grant_access(callback: CallbackQuery):
    name = callback.from_user.first_name or "–±–æ–µ—Ü"
    text = (
        "‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –±–æ–µ—Ü.\n"
        "ü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NDHQ.\n\n"
        "üì° –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
        "üì∞ –°–≤–µ–∂–∏–µ –∏–≥—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üõ† –ú–µ—Ç–∞-—Å–±–æ—Ä–∫–∏ –∏ –∞—Ä—Å–µ–Ω–∞–ª\n"
        "üìñ –ì–∞–π–¥—ã –∏ —Ä–∞–∑–±–æ—Ä—ã\n"
        "üéØ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
        "–°–æ–±–ª—é–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª. –£–¥–∞—á–∏ –≤ –±–æ—é!"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å–±–æ—Ä–∫–∏", web_app=WebAppInfo(url=WEBAPP_URL)),
            InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")
        ]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)


# --- /start ---
@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = str(message.from_user.id)

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
    try:
        import sqlite3
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT verified FROM users WHERE id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()

        if row and row[0] == 1:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å–±–æ—Ä–∫–∏", web_app=WebAppInfo(url=WEBAPP_URL)),
                    InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")
                ]
            ])
            await message.answer(
                "‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ.\n\n"
                "ü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NDHQ.\n\n"
                "üì° –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–≥–Ω–∞–ª–∏!",
                reply_markup=keyboard
            )
            return
    except Exception as e:
        print(f"[DB ERROR] {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/callofdutynd"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub")
        ]
    ])
    await message.answer(
        "ü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –±–æ–µ—Ü!\n\n"
        "üîê –¢—ã –Ω–∞ NDHQ ‚Äî —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏, –≥–∞–π–¥—ã, –º–µ—Ç–∞-—Å–±–æ—Ä–∫–∏, —Ä–∞–∑–±–æ—Ä—ã, —Å–æ–≤–µ—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –∏–∑ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞.\n\n"
        "üì° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ª–∏—á–Ω–æ—Å—Ç—å:\n"
        "–í—Å—Ç—É–ø–∏ –≤ —à—Ç–∞–± –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.\n\n"
        "‚ö†Ô∏è –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n"
        "–°–æ–±–ª—é–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        reply_markup=keyboard
    )

    


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@router.callback_query(F.data == "check_sub")
async def check_subscription(callback: CallbackQuery):
    user_id = str(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API (–≤—Å–µ–≥–¥–∞!)
    subscribed = False
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=int(user_id))
        if member.status in ("member", "administrator", "creator"):
            subscribed = True
    except Exception as e:
        print(f"[TG ERROR] {e}")

    if subscribed:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª)
        try:
            save_user(user_id, callback.from_user.first_name or "", callback.from_user.username or "")
            # –û–±–Ω–æ–≤–ª—è–µ–º verified = 1
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET verified = 1 WHERE id = ?", (user_id,))
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"[DB ERROR] {e}")

        await grant_access(callback)
        return


    # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫–∞–∑
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/callofdutynd"),
            InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_sub")
        ],
        [
            InlineKeyboardButton(text="üßë‚Äç‚úàÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/ndzone_admin")
        ]
    ])

    await callback.message.edit_text(
        "‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n"
        "–î–æ—Å—Ç—É–ø –∫ NDHQ –∑–∞–ø—Ä–µ—â—ë–Ω.\n\n"
        "üì° –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –≤—Å—Ç—É–ø–∏–ª –≤ —à—Ç–∞–± –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–∂–∞–≤ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.\n"
        "–ë–µ–∑ —ç—Ç–æ–≥–æ –≤—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.",
        reply_markup=keyboard
    )
    
    await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", show_alert=True)


from database import add_news
import re

@router.channel_post()
async def on_channel_post(message: Message):
    try:
        if message.chat.id != CHANNEL_ID:
            return

        text = message.text or message.caption or ""
        if "#–Ω–æ–≤–æ—Å—Ç–∏" not in text.lower():
            return

        # ‚úÖ –ê–Ω—Ç–∏-–¥—É–±–ª–∏ (–ø–æ message_id)
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM news WHERE content LIKE ?", (f"%tg://{message.message_id}%",))
        if cursor.fetchone()[0] > 0:
            print("[SKIP] –£–∂–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å.")
            return

        # ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        title = text.strip().split('\n')[0]

        # ‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞
        image_url = None
        if message.photo:
            largest = message.photo[-1]
            file = await bot.get_file(largest.file_id)
            image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

        # ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
        views = message.views or 0

        # ‚úÖ –î–∞—Ç–∞
        date_str = message.date.strftime("%d.%m.%Y %H:%M")

        # ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º
        def detect_category(text: str) -> str:
            text = text.lower()
            rules = {
                "call-of-duty": ["#callofduty", "#blackops", "#bo7", "#warzone", "#cod", "#mw3"],
                "battlefield": ["#battlefield", "#bf6", "#bf2042"],
                "cs2": ["#cs2", "#counterstrike"],
                "apex": ["#apex", "#apexlegends"],
            }
            for cat, tags in rules.items():
                if any(tag in text for tag in tags):
                    return cat
            return "general"

        category = detect_category(text)

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
        add_news({
            "title": title,
            "content": text.strip(),
            "image": image_url,
            "date": date_str,
            "category": category
        })

        print(f"[OK] –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {title}")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")




# --- –°—Ç–∞—Ä—Ç ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    init_db()  # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
