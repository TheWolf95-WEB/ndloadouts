import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, CallbackQuery, TelegramObject
)
from aiogram import BaseMiddleware, Router
from typing import Callable, Awaitable, Dict, Any
from database import save_user, init_db

# --- Middleware: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–∫—É ---
class PrivateOnlyMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable,
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        chat = getattr(event, 'chat', None) or getattr(getattr(event, 'message', None), 'chat', None)
        if chat and chat.type != "private":
            return
        return await handler(event, data)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv("/opt/ndloadouts/.env")
BOT_TOKEN = os.getenv("TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
CHANNEL_ID = "@ndbotslogs"
DB_PATH = "/opt/ndloadouts_storage/builds.db"

if not BOT_TOKEN or not WEBAPP_URL:
    raise ValueError("‚ùå BOT_TOKEN –∏ WEBAPP_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

dp.message.middleware(PrivateOnlyMiddleware())
dp.callback_query.middleware(PrivateOnlyMiddleware())
dp.include_router(router)

# --- –í—ã–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–∞ ---
async def grant_access(callback: CallbackQuery):
    name = callback.from_user.first_name or "–±–æ–µ—Ü"
    text = (
        f"ü™Ç –í—ã—Å–∞–¥–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, {name}!\n"
        "üîª –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ—é –º–µ—Ç—É –∏ –≤–æ—Ä–≤–∞—Ç—å—Å—è –≤ —Ç–æ–ø-1!\n"
        "üí¨ –ù–∞—à—ë–ª –±–∞–≥, –µ—Å—Ç—å –∏–¥–µ—è –∏–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É? ‚Äî –ü–∏—à–∏ –≤ —à—Ç–∞–±"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å–±–æ—Ä–∫–∏", web_app=WebAppInfo(url=WEBAPP_URL)),
            InlineKeyboardButton(text="üí¨ –®—Ç–∞–±", url="https://t.me/ndzone_admin")
        ]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard)

# --- /start ---
@router.message(CommandStart())
async def start_handler(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/ndbotslogs"),
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub")
        ]
    ])
    await message.answer(
        "ü™Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –±–æ–µ—Ü!\n\n"
        "üì° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–±–æ—Ä–∫–∞–º, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
        reply_markup=keyboard
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@router.callback_query(F.data == "check_sub")
async def check_subscription(callback: CallbackQuery):
    user_id = str(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ
    try:
        import sqlite3
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM users WHERE id = ?", (user_id,))
        if cursor.fetchone():
            await grant_access(callback)
            return
    except Exception as e:
        print(f"[DB ERROR] {e}")
    finally:
        conn.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=int(user_id))
        if member.status not in ("left", "kicked"):
            save_user(user_id, callback.from_user.first_name or "", callback.from_user.username or "")
            await grant_access(callback)
            return
    except Exception as e:
        print(f"[TG ERROR] {e}")

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/ndbotslogs"),
            InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_sub")
        ]
    ])
    await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", show_alert=True)
    await callback.message.edit_text(
        "üö´ –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n"
        "–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à—É —à—Ç–∞–± –∫–≤–∞—Ä—Ç–∏—Ä—É.\n"
        "üõ° –ë–µ–∑ —Å–≤—è–∑–∏ —Å–æ —à—Ç–∞–±–æ–º –¥–æ—Å—Ç—É–ø –∫ —Å–±–æ—Ä–∫–∞–º –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.",
        reply_markup=keyboard
    )

# --- –°—Ç–∞—Ä—Ç ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    init_db()  # ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
